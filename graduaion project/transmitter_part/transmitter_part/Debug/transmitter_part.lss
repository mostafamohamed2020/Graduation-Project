
transmitter_part.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  00000fc8  0000105c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e4  0080010c  0080010c  00001108  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001108  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003ef  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000012bb  00000000  00000000  00001d53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000074e  00000000  00000000  0000300e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013b5  00000000  00000000  0000375c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000330  00000000  00000000  00004b14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004e6  00000000  00000000  00004e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bd9  00000000  00000000  0000532a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000014d  00000000  00000000  00005f03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 30       	cpi	r26, 0x0C	; 12
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	ac e0       	ldi	r26, 0x0C	; 12
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3f       	cpi	r26, 0xF0	; 240
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
  8a:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SETPINDIR>:
#include "DIO.h"
#include "common_macros.h"

void DIO_SETPINDIR(u_int8 port , u_int8 pin , u_int8 dir)
{
	switch(dir)
  92:	44 23       	and	r20, r20
  94:	21 f0       	breq	.+8      	; 0x9e <DIO_SETPINDIR+0xc>
  96:	41 30       	cpi	r20, 0x01	; 1
  98:	09 f0       	breq	.+2      	; 0x9c <DIO_SETPINDIR+0xa>
  9a:	7f c0       	rjmp	.+254    	; 0x19a <DIO_SETPINDIR+0x108>
  9c:	42 c0       	rjmp	.+132    	; 0x122 <DIO_SETPINDIR+0x90>
	{
		case DIO_PIN_INPUT:  //in case of input 
		switch(port)
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	b1 f0       	breq	.+44     	; 0xce <DIO_SETPINDIR+0x3c>
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	30 f0       	brcs	.+12     	; 0xb2 <DIO_SETPINDIR+0x20>
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	01 f1       	breq	.+64     	; 0xea <DIO_SETPINDIR+0x58>
  aa:	83 30       	cpi	r24, 0x03	; 3
  ac:	09 f0       	breq	.+2      	; 0xb0 <DIO_SETPINDIR+0x1e>
  ae:	75 c0       	rjmp	.+234    	; 0x19a <DIO_SETPINDIR+0x108>
  b0:	2a c0       	rjmp	.+84     	; 0x106 <DIO_SETPINDIR+0x74>
		{
			case DIO_PORTA:
			clear_bit(DDRA , pin);
  b2:	2a b3       	in	r18, 0x1a	; 26
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	ac 01       	movw	r20, r24
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_SETPINDIR+0x2e>
  bc:	44 0f       	add	r20, r20
  be:	55 1f       	adc	r21, r21
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_SETPINDIR+0x2a>
  c4:	ba 01       	movw	r22, r20
  c6:	60 95       	com	r22
  c8:	62 23       	and	r22, r18
  ca:	6a bb       	out	0x1a, r22	; 26
			break;
  cc:	08 95       	ret
			case DIO_PORTB:
			clear_bit(DDRB , pin);
  ce:	27 b3       	in	r18, 0x17	; 23
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	ac 01       	movw	r20, r24
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_SETPINDIR+0x4a>
  d8:	44 0f       	add	r20, r20
  da:	55 1f       	adc	r21, r21
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_SETPINDIR+0x46>
  e0:	ba 01       	movw	r22, r20
  e2:	60 95       	com	r22
  e4:	62 23       	and	r22, r18
  e6:	67 bb       	out	0x17, r22	; 23
			break;
  e8:	08 95       	ret
			case DIO_PORTC:
			clear_bit(DDRC , pin);
  ea:	24 b3       	in	r18, 0x14	; 20
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_SETPINDIR+0x66>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_SETPINDIR+0x62>
  fc:	ba 01       	movw	r22, r20
  fe:	60 95       	com	r22
 100:	62 23       	and	r22, r18
 102:	64 bb       	out	0x14, r22	; 20
			break;
 104:	08 95       	ret
			case DIO_PORTD:
			clear_bit(DDRD , pin);
 106:	21 b3       	in	r18, 0x11	; 17
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	ac 01       	movw	r20, r24
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_SETPINDIR+0x82>
 110:	44 0f       	add	r20, r20
 112:	55 1f       	adc	r21, r21
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_SETPINDIR+0x7e>
 118:	ba 01       	movw	r22, r20
 11a:	60 95       	com	r22
 11c:	62 23       	and	r22, r18
 11e:	61 bb       	out	0x11, r22	; 17
			break;
 120:	08 95       	ret
			break;
		} //end of switch(port)
		break;
		
		case DIO_PIN_OUTPUT:  //in case of output
		switch(port)
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	a1 f0       	breq	.+40     	; 0x14e <DIO_SETPINDIR+0xbc>
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	28 f0       	brcs	.+10     	; 0x134 <DIO_SETPINDIR+0xa2>
 12a:	82 30       	cpi	r24, 0x02	; 2
 12c:	e9 f0       	breq	.+58     	; 0x168 <DIO_SETPINDIR+0xd6>
 12e:	83 30       	cpi	r24, 0x03	; 3
 130:	a1 f5       	brne	.+104    	; 0x19a <DIO_SETPINDIR+0x108>
 132:	27 c0       	rjmp	.+78     	; 0x182 <DIO_SETPINDIR+0xf0>
		{
			case DIO_PORTA:
			set_bit(DDRA , pin);
 134:	2a b3       	in	r18, 0x1a	; 26
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	ac 01       	movw	r20, r24
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_SETPINDIR+0xb0>
 13e:	44 0f       	add	r20, r20
 140:	55 1f       	adc	r21, r21
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_SETPINDIR+0xac>
 146:	ba 01       	movw	r22, r20
 148:	62 2b       	or	r22, r18
 14a:	6a bb       	out	0x1a, r22	; 26
			break;
 14c:	08 95       	ret
			case DIO_PORTB:
			set_bit(DDRB , pin);
 14e:	27 b3       	in	r18, 0x17	; 23
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	ac 01       	movw	r20, r24
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_SETPINDIR+0xca>
 158:	44 0f       	add	r20, r20
 15a:	55 1f       	adc	r21, r21
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_SETPINDIR+0xc6>
 160:	ba 01       	movw	r22, r20
 162:	62 2b       	or	r22, r18
 164:	67 bb       	out	0x17, r22	; 23
			break;
 166:	08 95       	ret
			case DIO_PORTC:
			set_bit(DDRC , pin);
 168:	24 b3       	in	r18, 0x14	; 20
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	ac 01       	movw	r20, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_SETPINDIR+0xe4>
 172:	44 0f       	add	r20, r20
 174:	55 1f       	adc	r21, r21
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_SETPINDIR+0xe0>
 17a:	ba 01       	movw	r22, r20
 17c:	62 2b       	or	r22, r18
 17e:	64 bb       	out	0x14, r22	; 20
			break;
 180:	08 95       	ret
			case DIO_PORTD:
			set_bit(DDRD , pin);
 182:	21 b3       	in	r18, 0x11	; 17
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	ac 01       	movw	r20, r24
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_SETPINDIR+0xfe>
 18c:	44 0f       	add	r20, r20
 18e:	55 1f       	adc	r21, r21
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_SETPINDIR+0xfa>
 194:	ba 01       	movw	r22, r20
 196:	62 2b       	or	r22, r18
 198:	61 bb       	out	0x11, r22	; 17
 19a:	08 95       	ret

0000019c <DIO_SETPORTDIR>:
	} //end of swich(dir)
} //end of function

void DIO_SETPORTDIR(u_int8 port , u_int8 dir)
{
	switch(port)
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	49 f0       	breq	.+18     	; 0x1b2 <DIO_SETPORTDIR+0x16>
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	28 f0       	brcs	.+10     	; 0x1ae <DIO_SETPORTDIR+0x12>
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	39 f0       	breq	.+14     	; 0x1b6 <DIO_SETPORTDIR+0x1a>
 1a8:	83 30       	cpi	r24, 0x03	; 3
 1aa:	41 f4       	brne	.+16     	; 0x1bc <DIO_SETPORTDIR+0x20>
 1ac:	06 c0       	rjmp	.+12     	; 0x1ba <DIO_SETPORTDIR+0x1e>
	{
		case DIO_PORTA:
		DDRA = dir;
 1ae:	6a bb       	out	0x1a, r22	; 26
		break;
 1b0:	08 95       	ret
	    case DIO_PORTB:
		DDRB = dir;
 1b2:	67 bb       	out	0x17, r22	; 23
		break;
 1b4:	08 95       	ret
		case DIO_PORTC:
		DDRC = dir;
 1b6:	64 bb       	out	0x14, r22	; 20
		break;
 1b8:	08 95       	ret
		case DIO_PORTD:
		DDRD = dir;
 1ba:	61 bb       	out	0x11, r22	; 17
 1bc:	08 95       	ret

000001be <DIO_SETPINVAL>:
	} //end of switch(port)
} //end of the function

void DIO_SETPINVAL(u_int8 port , u_int8 pin , u_int8 val)
{
	switch(val)
 1be:	44 23       	and	r20, r20
 1c0:	21 f0       	breq	.+8      	; 0x1ca <DIO_SETPINVAL+0xc>
 1c2:	41 30       	cpi	r20, 0x01	; 1
 1c4:	09 f0       	breq	.+2      	; 0x1c8 <DIO_SETPINVAL+0xa>
 1c6:	7f c0       	rjmp	.+254    	; 0x2c6 <DIO_SETPINVAL+0x108>
 1c8:	42 c0       	rjmp	.+132    	; 0x24e <DIO_SETPINVAL+0x90>
	{
		case DIO_PIN_LOW:
		switch(port)
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	b1 f0       	breq	.+44     	; 0x1fa <DIO_SETPINVAL+0x3c>
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	30 f0       	brcs	.+12     	; 0x1de <DIO_SETPINVAL+0x20>
 1d2:	82 30       	cpi	r24, 0x02	; 2
 1d4:	01 f1       	breq	.+64     	; 0x216 <DIO_SETPINVAL+0x58>
 1d6:	83 30       	cpi	r24, 0x03	; 3
 1d8:	09 f0       	breq	.+2      	; 0x1dc <DIO_SETPINVAL+0x1e>
 1da:	75 c0       	rjmp	.+234    	; 0x2c6 <DIO_SETPINVAL+0x108>
 1dc:	2a c0       	rjmp	.+84     	; 0x232 <DIO_SETPINVAL+0x74>
		{
			case DIO_PORTA:
			clear_bit(PORTA , pin);
 1de:	2b b3       	in	r18, 0x1b	; 27
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	ac 01       	movw	r20, r24
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_SETPINVAL+0x2e>
 1e8:	44 0f       	add	r20, r20
 1ea:	55 1f       	adc	r21, r21
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_SETPINVAL+0x2a>
 1f0:	ba 01       	movw	r22, r20
 1f2:	60 95       	com	r22
 1f4:	62 23       	and	r22, r18
 1f6:	6b bb       	out	0x1b, r22	; 27
			break;
 1f8:	08 95       	ret
			case DIO_PORTB:
			clear_bit(PORTB , pin);
 1fa:	28 b3       	in	r18, 0x18	; 24
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	ac 01       	movw	r20, r24
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_SETPINVAL+0x4a>
 204:	44 0f       	add	r20, r20
 206:	55 1f       	adc	r21, r21
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_SETPINVAL+0x46>
 20c:	ba 01       	movw	r22, r20
 20e:	60 95       	com	r22
 210:	62 23       	and	r22, r18
 212:	68 bb       	out	0x18, r22	; 24
			break;
 214:	08 95       	ret
			case DIO_PORTC:
			clear_bit(PORTC , pin);
 216:	25 b3       	in	r18, 0x15	; 21
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	ac 01       	movw	r20, r24
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_SETPINVAL+0x66>
 220:	44 0f       	add	r20, r20
 222:	55 1f       	adc	r21, r21
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_SETPINVAL+0x62>
 228:	ba 01       	movw	r22, r20
 22a:	60 95       	com	r22
 22c:	62 23       	and	r22, r18
 22e:	65 bb       	out	0x15, r22	; 21
			break;
 230:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD , pin);
 232:	22 b3       	in	r18, 0x12	; 18
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	ac 01       	movw	r20, r24
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_SETPINVAL+0x82>
 23c:	44 0f       	add	r20, r20
 23e:	55 1f       	adc	r21, r21
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_SETPINVAL+0x7e>
 244:	ba 01       	movw	r22, r20
 246:	60 95       	com	r22
 248:	62 23       	and	r22, r18
 24a:	62 bb       	out	0x12, r22	; 18
			break;
 24c:	08 95       	ret
			break;
		} //end of switch(port)
		break;
		
		case DIO_PIN_HIGH:
		switch(port)
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	a1 f0       	breq	.+40     	; 0x27a <DIO_SETPINVAL+0xbc>
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	28 f0       	brcs	.+10     	; 0x260 <DIO_SETPINVAL+0xa2>
 256:	82 30       	cpi	r24, 0x02	; 2
 258:	e9 f0       	breq	.+58     	; 0x294 <DIO_SETPINVAL+0xd6>
 25a:	83 30       	cpi	r24, 0x03	; 3
 25c:	a1 f5       	brne	.+104    	; 0x2c6 <DIO_SETPINVAL+0x108>
 25e:	27 c0       	rjmp	.+78     	; 0x2ae <DIO_SETPINVAL+0xf0>
		{
			case DIO_PORTA:
			set_bit(PORTA , pin);
 260:	2b b3       	in	r18, 0x1b	; 27
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	ac 01       	movw	r20, r24
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_SETPINVAL+0xb0>
 26a:	44 0f       	add	r20, r20
 26c:	55 1f       	adc	r21, r21
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_SETPINVAL+0xac>
 272:	ba 01       	movw	r22, r20
 274:	62 2b       	or	r22, r18
 276:	6b bb       	out	0x1b, r22	; 27
			break;
 278:	08 95       	ret
			case DIO_PORTB:
			set_bit(PORTB , pin);
 27a:	28 b3       	in	r18, 0x18	; 24
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	ac 01       	movw	r20, r24
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_SETPINVAL+0xca>
 284:	44 0f       	add	r20, r20
 286:	55 1f       	adc	r21, r21
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_SETPINVAL+0xc6>
 28c:	ba 01       	movw	r22, r20
 28e:	62 2b       	or	r22, r18
 290:	68 bb       	out	0x18, r22	; 24
			break;
 292:	08 95       	ret
			case DIO_PORTC:
			set_bit(PORTC , pin);
 294:	25 b3       	in	r18, 0x15	; 21
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	ac 01       	movw	r20, r24
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_SETPINVAL+0xe4>
 29e:	44 0f       	add	r20, r20
 2a0:	55 1f       	adc	r21, r21
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_SETPINVAL+0xe0>
 2a6:	ba 01       	movw	r22, r20
 2a8:	62 2b       	or	r22, r18
 2aa:	65 bb       	out	0x15, r22	; 21
			break;
 2ac:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD , pin);
 2ae:	22 b3       	in	r18, 0x12	; 18
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	ac 01       	movw	r20, r24
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_SETPINVAL+0xfe>
 2b8:	44 0f       	add	r20, r20
 2ba:	55 1f       	adc	r21, r21
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_SETPINVAL+0xfa>
 2c0:	ba 01       	movw	r22, r20
 2c2:	62 2b       	or	r22, r18
 2c4:	62 bb       	out	0x12, r22	; 18
 2c6:	08 95       	ret

000002c8 <DIO_SETPORTVAL>:
	} //end of switch(val)
} //end of the function

void DIO_SETPORTVAL(u_int8 port , u_int8 val)
{
	switch(port)
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	49 f0       	breq	.+18     	; 0x2de <DIO_SETPORTVAL+0x16>
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	28 f0       	brcs	.+10     	; 0x2da <DIO_SETPORTVAL+0x12>
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	39 f0       	breq	.+14     	; 0x2e2 <DIO_SETPORTVAL+0x1a>
 2d4:	83 30       	cpi	r24, 0x03	; 3
 2d6:	41 f4       	brne	.+16     	; 0x2e8 <DIO_SETPORTVAL+0x20>
 2d8:	06 c0       	rjmp	.+12     	; 0x2e6 <DIO_SETPORTVAL+0x1e>
	{
		case DIO_PORTA:
		PORTA = val;
 2da:	6b bb       	out	0x1b, r22	; 27
		break;
 2dc:	08 95       	ret
		case DIO_PORTB:
		PORTB = val;
 2de:	68 bb       	out	0x18, r22	; 24
		break;
 2e0:	08 95       	ret
		case DIO_PORTC:
		PORTC = val;
 2e2:	65 bb       	out	0x15, r22	; 21
		break;
 2e4:	08 95       	ret
		case DIO_PORTD:
		PORTD = val;
 2e6:	62 bb       	out	0x12, r22	; 18
 2e8:	08 95       	ret

000002ea <DIO_READPIN>:
	} //end of switch(port)
} //end of the function

void DIO_READPIN(u_int8 port , u_int8 pin , u_int8* val)
{
	switch(port)
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	b9 f0       	breq	.+46     	; 0x31c <DIO_READPIN+0x32>
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	30 f0       	brcs	.+12     	; 0x2fe <DIO_READPIN+0x14>
 2f2:	82 30       	cpi	r24, 0x02	; 2
 2f4:	11 f1       	breq	.+68     	; 0x33a <DIO_READPIN+0x50>
 2f6:	83 30       	cpi	r24, 0x03	; 3
 2f8:	09 f0       	breq	.+2      	; 0x2fc <DIO_READPIN+0x12>
 2fa:	3c c0       	rjmp	.+120    	; 0x374 <DIO_READPIN+0x8a>
 2fc:	2d c0       	rjmp	.+90     	; 0x358 <DIO_READPIN+0x6e>
	{
		case DIO_PORTA:
		*val = get_bit(PINA , pin);
 2fe:	89 b3       	in	r24, 0x19	; 25
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	9c 01       	movw	r18, r24
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_READPIN+0x20>
 306:	35 95       	asr	r19
 308:	27 95       	ror	r18
 30a:	6a 95       	dec	r22
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_READPIN+0x1c>
 30e:	b9 01       	movw	r22, r18
 310:	61 70       	andi	r22, 0x01	; 1
 312:	69 bb       	out	0x19, r22	; 25
 314:	89 b3       	in	r24, 0x19	; 25
 316:	fa 01       	movw	r30, r20
 318:	80 83       	st	Z, r24
		break;
 31a:	08 95       	ret
		case DIO_PORTB:
		*val = get_bit(PINB , pin);
 31c:	86 b3       	in	r24, 0x16	; 22
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	9c 01       	movw	r18, r24
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_READPIN+0x3e>
 324:	35 95       	asr	r19
 326:	27 95       	ror	r18
 328:	6a 95       	dec	r22
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_READPIN+0x3a>
 32c:	b9 01       	movw	r22, r18
 32e:	61 70       	andi	r22, 0x01	; 1
 330:	66 bb       	out	0x16, r22	; 22
 332:	86 b3       	in	r24, 0x16	; 22
 334:	fa 01       	movw	r30, r20
 336:	80 83       	st	Z, r24
		break;
 338:	08 95       	ret
		case DIO_PORTC:
		*val = get_bit(PINC , pin);
 33a:	83 b3       	in	r24, 0x13	; 19
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	9c 01       	movw	r18, r24
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_READPIN+0x5c>
 342:	35 95       	asr	r19
 344:	27 95       	ror	r18
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_READPIN+0x58>
 34a:	b9 01       	movw	r22, r18
 34c:	61 70       	andi	r22, 0x01	; 1
 34e:	63 bb       	out	0x13, r22	; 19
 350:	83 b3       	in	r24, 0x13	; 19
 352:	fa 01       	movw	r30, r20
 354:	80 83       	st	Z, r24
		break;
 356:	08 95       	ret
		case DIO_PORTD:
		*val = get_bit(PIND , pin);
 358:	80 b3       	in	r24, 0x10	; 16
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	9c 01       	movw	r18, r24
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_READPIN+0x7a>
 360:	35 95       	asr	r19
 362:	27 95       	ror	r18
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_READPIN+0x76>
 368:	b9 01       	movw	r22, r18
 36a:	61 70       	andi	r22, 0x01	; 1
 36c:	60 bb       	out	0x10, r22	; 16
 36e:	80 b3       	in	r24, 0x10	; 16
 370:	fa 01       	movw	r30, r20
 372:	80 83       	st	Z, r24
 374:	08 95       	ret

00000376 <DIO_READPORT>:
	} //end of switch(port)
}//end of the function
 
void DIO_READPORT(u_int8 port , u_int8* val)
{
	switch(port)
 376:	81 30       	cpi	r24, 0x01	; 1
 378:	59 f0       	breq	.+22     	; 0x390 <DIO_READPORT+0x1a>
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	28 f0       	brcs	.+10     	; 0x388 <DIO_READPORT+0x12>
 37e:	82 30       	cpi	r24, 0x02	; 2
 380:	59 f0       	breq	.+22     	; 0x398 <DIO_READPORT+0x22>
 382:	83 30       	cpi	r24, 0x03	; 3
 384:	81 f4       	brne	.+32     	; 0x3a6 <DIO_READPORT+0x30>
 386:	0c c0       	rjmp	.+24     	; 0x3a0 <DIO_READPORT+0x2a>
	{
		case DIO_PORTA:
		*val = PINA;
 388:	89 b3       	in	r24, 0x19	; 25
 38a:	fb 01       	movw	r30, r22
 38c:	80 83       	st	Z, r24
		break;
 38e:	08 95       	ret
		case DIO_PORTB:
		*val = PINB;
 390:	86 b3       	in	r24, 0x16	; 22
 392:	fb 01       	movw	r30, r22
 394:	80 83       	st	Z, r24
		break;
 396:	08 95       	ret
		case DIO_PORTC:
		*val = PINC;
 398:	83 b3       	in	r24, 0x13	; 19
 39a:	fb 01       	movw	r30, r22
 39c:	80 83       	st	Z, r24
		break;
 39e:	08 95       	ret
		case DIO_PORTD:
		*val = PIND;
 3a0:	80 b3       	in	r24, 0x10	; 16
 3a2:	fb 01       	movw	r30, r22
 3a4:	80 83       	st	Z, r24
 3a6:	08 95       	ret

000003a8 <DIO_PINTOGGLE>:
	} //end of switch(port)
} //end of the function

void DIO_PINTOGGLE(u_int8 port , u_int8 pin)
{
	switch(port)
 3a8:	81 30       	cpi	r24, 0x01	; 1
 3aa:	a1 f0       	breq	.+40     	; 0x3d4 <DIO_PINTOGGLE+0x2c>
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	28 f0       	brcs	.+10     	; 0x3ba <DIO_PINTOGGLE+0x12>
 3b0:	82 30       	cpi	r24, 0x02	; 2
 3b2:	e9 f0       	breq	.+58     	; 0x3ee <DIO_PINTOGGLE+0x46>
 3b4:	83 30       	cpi	r24, 0x03	; 3
 3b6:	a1 f5       	brne	.+104    	; 0x420 <DIO_PINTOGGLE+0x78>
 3b8:	27 c0       	rjmp	.+78     	; 0x408 <DIO_PINTOGGLE+0x60>
	{
		case DIO_PORTA:
		toggle_bit(PORTA , pin);
 3ba:	2b b3       	in	r18, 0x1b	; 27
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	ac 01       	movw	r20, r24
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_PINTOGGLE+0x20>
 3c4:	44 0f       	add	r20, r20
 3c6:	55 1f       	adc	r21, r21
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_PINTOGGLE+0x1c>
 3cc:	ba 01       	movw	r22, r20
 3ce:	62 27       	eor	r22, r18
 3d0:	6b bb       	out	0x1b, r22	; 27
		break;
 3d2:	08 95       	ret
		case DIO_PORTB:
		toggle_bit(PORTB , pin);
 3d4:	28 b3       	in	r18, 0x18	; 24
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	ac 01       	movw	r20, r24
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_PINTOGGLE+0x3a>
 3de:	44 0f       	add	r20, r20
 3e0:	55 1f       	adc	r21, r21
 3e2:	6a 95       	dec	r22
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_PINTOGGLE+0x36>
 3e6:	ba 01       	movw	r22, r20
 3e8:	62 27       	eor	r22, r18
 3ea:	68 bb       	out	0x18, r22	; 24
		break;
 3ec:	08 95       	ret
		case DIO_PORTC:
		toggle_bit(PORTC , pin);
 3ee:	25 b3       	in	r18, 0x15	; 21
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	ac 01       	movw	r20, r24
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_PINTOGGLE+0x54>
 3f8:	44 0f       	add	r20, r20
 3fa:	55 1f       	adc	r21, r21
 3fc:	6a 95       	dec	r22
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_PINTOGGLE+0x50>
 400:	ba 01       	movw	r22, r20
 402:	62 27       	eor	r22, r18
 404:	65 bb       	out	0x15, r22	; 21
		break;
 406:	08 95       	ret
		case DIO_PORTD:
		toggle_bit(PORTD , pin);
 408:	22 b3       	in	r18, 0x12	; 18
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	ac 01       	movw	r20, r24
 410:	02 c0       	rjmp	.+4      	; 0x416 <DIO_PINTOGGLE+0x6e>
 412:	44 0f       	add	r20, r20
 414:	55 1f       	adc	r21, r21
 416:	6a 95       	dec	r22
 418:	e2 f7       	brpl	.-8      	; 0x412 <DIO_PINTOGGLE+0x6a>
 41a:	ba 01       	movw	r22, r20
 41c:	62 27       	eor	r22, r18
 41e:	62 bb       	out	0x12, r22	; 18
 420:	08 95       	ret

00000422 <DIO_SETPULLUPS>:
	} //end of switch(port)
} //end of the function

void DIO_SETPULLUPS(u_int8 port , u_int8 pin)
{
	switch (port)
 422:	81 30       	cpi	r24, 0x01	; 1
 424:	a1 f0       	breq	.+40     	; 0x44e <DIO_SETPULLUPS+0x2c>
 426:	81 30       	cpi	r24, 0x01	; 1
 428:	28 f0       	brcs	.+10     	; 0x434 <DIO_SETPULLUPS+0x12>
 42a:	82 30       	cpi	r24, 0x02	; 2
 42c:	e9 f0       	breq	.+58     	; 0x468 <DIO_SETPULLUPS+0x46>
 42e:	83 30       	cpi	r24, 0x03	; 3
 430:	a1 f5       	brne	.+104    	; 0x49a <DIO_SETPULLUPS+0x78>
 432:	27 c0       	rjmp	.+78     	; 0x482 <DIO_SETPULLUPS+0x60>
	{
		case DIO_PORTA:
		set_bit(PORTA , pin);
 434:	2b b3       	in	r18, 0x1b	; 27
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	ac 01       	movw	r20, r24
 43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_SETPULLUPS+0x20>
 43e:	44 0f       	add	r20, r20
 440:	55 1f       	adc	r21, r21
 442:	6a 95       	dec	r22
 444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_SETPULLUPS+0x1c>
 446:	ba 01       	movw	r22, r20
 448:	62 2b       	or	r22, r18
 44a:	6b bb       	out	0x1b, r22	; 27
		break;
 44c:	08 95       	ret
		
		case DIO_PORTB:
		set_bit(PORTB , pin);
 44e:	28 b3       	in	r18, 0x18	; 24
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	ac 01       	movw	r20, r24
 456:	02 c0       	rjmp	.+4      	; 0x45c <DIO_SETPULLUPS+0x3a>
 458:	44 0f       	add	r20, r20
 45a:	55 1f       	adc	r21, r21
 45c:	6a 95       	dec	r22
 45e:	e2 f7       	brpl	.-8      	; 0x458 <DIO_SETPULLUPS+0x36>
 460:	ba 01       	movw	r22, r20
 462:	62 2b       	or	r22, r18
 464:	68 bb       	out	0x18, r22	; 24
		break;
 466:	08 95       	ret
		
		case DIO_PORTC:
		set_bit(PORTC , pin);
 468:	25 b3       	in	r18, 0x15	; 21
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	ac 01       	movw	r20, r24
 470:	02 c0       	rjmp	.+4      	; 0x476 <DIO_SETPULLUPS+0x54>
 472:	44 0f       	add	r20, r20
 474:	55 1f       	adc	r21, r21
 476:	6a 95       	dec	r22
 478:	e2 f7       	brpl	.-8      	; 0x472 <DIO_SETPULLUPS+0x50>
 47a:	ba 01       	movw	r22, r20
 47c:	62 2b       	or	r22, r18
 47e:	65 bb       	out	0x15, r22	; 21
		break;
 480:	08 95       	ret
		
		case DIO_PORTD:
		set_bit(PORTD , pin);
 482:	22 b3       	in	r18, 0x12	; 18
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	ac 01       	movw	r20, r24
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_SETPULLUPS+0x6e>
 48c:	44 0f       	add	r20, r20
 48e:	55 1f       	adc	r21, r21
 490:	6a 95       	dec	r22
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_SETPULLUPS+0x6a>
 494:	ba 01       	movw	r22, r20
 496:	62 2b       	or	r22, r18
 498:	62 bb       	out	0x12, r22	; 18
 49a:	08 95       	ret

0000049c <ESP8266_ClearBuffer>:

/* CLEAR MODULE BUFFER */
void ESP8266_ClearBuffer( void )
{
	u_int8 LOC_Iterator1 = 0 ;
	Iterator = 0 ;
 49c:	10 92 0c 01 	sts	0x010C, r1
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	90 e0       	ldi	r25, 0x00	; 0

	for( LOC_Iterator1 = 0 ; LOC_Iterator1 < 150 ; LOC_Iterator1++ ){

		DataCome[ LOC_Iterator1 ] = 0 ;
 4a4:	2d e0       	ldi	r18, 0x0D	; 13
 4a6:	31 e0       	ldi	r19, 0x01	; 1
 4a8:	f9 01       	movw	r30, r18
 4aa:	e8 0f       	add	r30, r24
 4ac:	f9 1f       	adc	r31, r25
 4ae:	10 82       	st	Z, r1
 4b0:	01 96       	adiw	r24, 0x01	; 1
void ESP8266_ClearBuffer( void )
{
	u_int8 LOC_Iterator1 = 0 ;
	Iterator = 0 ;

	for( LOC_Iterator1 = 0 ; LOC_Iterator1 < 150 ; LOC_Iterator1++ ){
 4b2:	86 39       	cpi	r24, 0x96	; 150
 4b4:	91 05       	cpc	r25, r1
 4b6:	c1 f7       	brne	.-16     	; 0x4a8 <ESP8266_ClearBuffer+0xc>

		DataCome[ LOC_Iterator1 ] = 0 ;

	}

 4b8:	08 95       	ret

000004ba <ESP8266_SendHttpReq>:

}

/* SEND REQUEST FOR DATA */
void ESP8266_SendHttpReq( u_int8 * Key , u_int8 * Data , u_int8 * Length )
{
 4ba:	ef 92       	push	r14
 4bc:	ff 92       	push	r15
 4be:	0f 93       	push	r16
 4c0:	1f 93       	push	r17
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	8c 01       	movw	r16, r24
 4c8:	7b 01       	movw	r14, r22
 4ca:	ea 01       	movw	r28, r20
	ESP8266_ClearBuffer();
 4cc:	0e 94 4e 02 	call	0x49c	; 0x49c <ESP8266_ClearBuffer>

	UART_sendString( (u_int8 *) "AT+CIPSEND=" );
 4d0:	80 e6       	ldi	r24, 0x60	; 96
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
	UART_sendString( (u_int8 *) Length );
 4d8:	ce 01       	movw	r24, r28
 4da:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
	UART_sendString( (u_int8 *) "\r\n" );
 4de:	cc e6       	ldi	r28, 0x6C	; 108
 4e0:	d0 e0       	ldi	r29, 0x00	; 0
 4e2:	ce 01       	movw	r24, r28
 4e4:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e8:	8f ef       	ldi	r24, 0xFF	; 255
 4ea:	94 e3       	ldi	r25, 0x34	; 52
 4ec:	ac e0       	ldi	r26, 0x0C	; 12
 4ee:	81 50       	subi	r24, 0x01	; 1
 4f0:	90 40       	sbci	r25, 0x00	; 0
 4f2:	a0 40       	sbci	r26, 0x00	; 0
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <ESP8266_SendHttpReq+0x34>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <ESP8266_SendHttpReq+0x3e>
 4f8:	00 00       	nop
	_delay_ms( 4000 );

	ESP8266_ClearBuffer();
 4fa:	0e 94 4e 02 	call	0x49c	; 0x49c <ESP8266_ClearBuffer>

	UART_sendString( (u_int8 *) "GET /update?api_key=" );
 4fe:	8f e6       	ldi	r24, 0x6F	; 111
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
	UART_sendString( (u_int8 *) Key );
 506:	c8 01       	movw	r24, r16
 508:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
	UART_sendString( (u_int8 *) "&field1=" );
 50c:	84 e8       	ldi	r24, 0x84	; 132
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
	UART_sendString( (u_int8 *) Data );
 514:	c7 01       	movw	r24, r14
 516:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
	UART_sendString( (u_int8 *) "\r\n" );
 51a:	ce 01       	movw	r24, r28
 51c:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
 520:	8f ef       	ldi	r24, 0xFF	; 255
 522:	98 e0       	ldi	r25, 0x08	; 8
 524:	ad e3       	ldi	r26, 0x3D	; 61
 526:	81 50       	subi	r24, 0x01	; 1
 528:	90 40       	sbci	r25, 0x00	; 0
 52a:	a0 40       	sbci	r26, 0x00	; 0
 52c:	e1 f7       	brne	.-8      	; 0x526 <ESP8266_SendHttpReq+0x6c>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <ESP8266_SendHttpReq+0x76>
 530:	00 00       	nop
	_delay_ms( 20000 );

}
 532:	df 91       	pop	r29
 534:	cf 91       	pop	r28
 536:	1f 91       	pop	r17
 538:	0f 91       	pop	r16
 53a:	ff 90       	pop	r15
 53c:	ef 90       	pop	r14
 53e:	08 95       	ret

00000540 <ESP8266_ConnectToSrvTcp>:

}

/* CONNECT TO THE SERVER */
void ESP8266_ConnectToSrvTcp( u_int8 * Domain , u_int8 * Port )
{
 540:	0f 93       	push	r16
 542:	1f 93       	push	r17
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	ec 01       	movw	r28, r24
 54a:	8b 01       	movw	r16, r22
	/* CLEAR ESP8266 BUFFER */
	ESP8266_ClearBuffer();
 54c:	0e 94 4e 02 	call	0x49c	; 0x49c <ESP8266_ClearBuffer>

	UART_sendString( (u_int8 *) "AT+CIPSTART=\"TCP\",\"" );
 550:	8d e8       	ldi	r24, 0x8D	; 141
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
	UART_sendString( (u_int8 *) Domain );
 558:	ce 01       	movw	r24, r28
 55a:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
	UART_sendString( (u_int8 *) "\"," );
 55e:	81 ea       	ldi	r24, 0xA1	; 161
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
	UART_sendString( (u_int8 *) Port );
 566:	c8 01       	movw	r24, r16
 568:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
	UART_sendString( (u_int8 *) "\r\n" );
 56c:	8c e6       	ldi	r24, 0x6C	; 108
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
 574:	8f e7       	ldi	r24, 0x7F	; 127
 576:	9a e1       	ldi	r25, 0x1A	; 26
 578:	a6 e0       	ldi	r26, 0x06	; 6
 57a:	81 50       	subi	r24, 0x01	; 1
 57c:	90 40       	sbci	r25, 0x00	; 0
 57e:	a0 40       	sbci	r26, 0x00	; 0
 580:	e1 f7       	brne	.-8      	; 0x57a <ESP8266_ConnectToSrvTcp+0x3a>
 582:	00 c0       	rjmp	.+0      	; 0x584 <ESP8266_ConnectToSrvTcp+0x44>
 584:	00 00       	nop
	_delay_ms( 2000 );

}
 586:	df 91       	pop	r29
 588:	cf 91       	pop	r28
 58a:	1f 91       	pop	r17
 58c:	0f 91       	pop	r16
 58e:	08 95       	ret

00000590 <ESP8266_ReceiveHttpReq>:

}

/* RECEIVE DATA FROM THE SERVER */
u_int8   ESP8266_ReceiveHttpReq( u_int8 * ChannelID , u_int8 * Length )
{
 590:	0f 93       	push	r16
 592:	1f 93       	push	r17
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	8c 01       	movw	r16, r24
 59a:	eb 01       	movw	r28, r22
	ESP8266_ClearBuffer();
 59c:	0e 94 4e 02 	call	0x49c	; 0x49c <ESP8266_ClearBuffer>

	UART_sendString( (u_int8 *) "AT+CIPSEND=" );
 5a0:	80 e6       	ldi	r24, 0x60	; 96
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
	UART_sendString( (u_int8 *) Length );
 5a8:	ce 01       	movw	r24, r28
 5aa:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
	UART_sendString( (u_int8 *) "\r\n" );
 5ae:	8c e6       	ldi	r24, 0x6C	; 108
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
 5b6:	8f ef       	ldi	r24, 0xFF	; 255
 5b8:	94 e3       	ldi	r25, 0x34	; 52
 5ba:	ac e0       	ldi	r26, 0x0C	; 12
 5bc:	81 50       	subi	r24, 0x01	; 1
 5be:	90 40       	sbci	r25, 0x00	; 0
 5c0:	a0 40       	sbci	r26, 0x00	; 0
 5c2:	e1 f7       	brne	.-8      	; 0x5bc <ESP8266_ReceiveHttpReq+0x2c>
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <ESP8266_ReceiveHttpReq+0x36>
 5c6:	00 00       	nop
	_delay_ms( 4000 );

	ESP8266_ClearBuffer();
 5c8:	0e 94 4e 02 	call	0x49c	; 0x49c <ESP8266_ClearBuffer>

	UART_sendString( (u_int8 *) "GET http://" );
 5cc:	84 ea       	ldi	r24, 0xA4	; 164
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
	UART_sendString( (u_int8 *) ChannelID );
 5d4:	c8 01       	movw	r24, r16
 5d6:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
	UART_sendString( (u_int8 *) "/value.txt\r\n" );
 5da:	80 eb       	ldi	r24, 0xB0	; 176
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
 5e2:	8f ef       	ldi	r24, 0xFF	; 255
 5e4:	98 e0       	ldi	r25, 0x08	; 8
 5e6:	ad e3       	ldi	r26, 0x3D	; 61
 5e8:	81 50       	subi	r24, 0x01	; 1
 5ea:	90 40       	sbci	r25, 0x00	; 0
 5ec:	a0 40       	sbci	r26, 0x00	; 0
 5ee:	e1 f7       	brne	.-8      	; 0x5e8 <ESP8266_ReceiveHttpReq+0x58>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <ESP8266_ReceiveHttpReq+0x62>
 5f2:	00 00       	nop
	_delay_ms( 20000 );

	ESP8266_ConnectToSrvTcp( (u_int8 *)"162.253.155.226" , (u_int8 *)"80" );
 5f4:	8d eb       	ldi	r24, 0xBD	; 189
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	6d ec       	ldi	r22, 0xCD	; 205
 5fa:	70 e0       	ldi	r23, 0x00	; 0
 5fc:	0e 94 a0 02 	call	0x540	; 0x540 <ESP8266_ConnectToSrvTcp>

	/*For yrabiot3.freevar.com ( Value Array Index )*/
	return  DataCome[82] ;
 600:	80 91 5f 01 	lds	r24, 0x015F

}
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	1f 91       	pop	r17
 60a:	0f 91       	pop	r16
 60c:	08 95       	ret

0000060e <ESP8266_ConnectToWiFi>:

}

/* CONNECT TO THE LOCAL NETWORK (ROUTER) */
void ESP8266_ConnectToWiFi( u_int8 * SSID , u_int8 * Password )
{
 60e:	0f 93       	push	r16
 610:	1f 93       	push	r17
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	ec 01       	movw	r28, r24
 618:	8b 01       	movw	r16, r22
	/* CLEAR ESP8266 BUFFER */
	ESP8266_ClearBuffer();
 61a:	0e 94 4e 02 	call	0x49c	; 0x49c <ESP8266_ClearBuffer>

	UART_sendString( (u_int8 *) "AT+CWJAP=\"" );
 61e:	80 ed       	ldi	r24, 0xD0	; 208
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
	UART_sendString( (u_int8 *) SSID );
 626:	ce 01       	movw	r24, r28
 628:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
	UART_sendString( (u_int8 *) "\",\"" );
 62c:	8b ed       	ldi	r24, 0xDB	; 219
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
	UART_sendString( (u_int8 *) Password);
 634:	c8 01       	movw	r24, r16
 636:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
	UART_sendString( (u_int8 *) "\"\r\n");
 63a:	8f ed       	ldi	r24, 0xDF	; 223
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
 642:	8f ef       	ldi	r24, 0xFF	; 255
 644:	99 e6       	ldi	r25, 0x69	; 105
 646:	a8 e1       	ldi	r26, 0x18	; 24
 648:	81 50       	subi	r24, 0x01	; 1
 64a:	90 40       	sbci	r25, 0x00	; 0
 64c:	a0 40       	sbci	r26, 0x00	; 0
 64e:	e1 f7       	brne	.-8      	; 0x648 <ESP8266_ConnectToWiFi+0x3a>
 650:	00 c0       	rjmp	.+0      	; 0x652 <ESP8266_ConnectToWiFi+0x44>
 652:	00 00       	nop
	_delay_ms( 8000 );

}
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28
 658:	1f 91       	pop	r17
 65a:	0f 91       	pop	r16
 65c:	08 95       	ret

0000065e <ESP8266_INIT>:
/* INITIALIZE THE ESP MODULE */
void ESP8266_INIT( void )
{

	/* Sending AT Command To Check ESP8266 Is Working Or Not  */
	UART_sendString( (u_int8 *)"AT\r\n" );
 65e:	83 ee       	ldi	r24, 0xE3	; 227
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
 666:	8f eb       	ldi	r24, 0xBF	; 191
 668:	97 e2       	ldi	r25, 0x27	; 39
 66a:	a9 e0       	ldi	r26, 0x09	; 9
 66c:	81 50       	subi	r24, 0x01	; 1
 66e:	90 40       	sbci	r25, 0x00	; 0
 670:	a0 40       	sbci	r26, 0x00	; 0
 672:	e1 f7       	brne	.-8      	; 0x66c <ESP8266_INIT+0xe>
 674:	00 c0       	rjmp	.+0      	; 0x676 <ESP8266_INIT+0x18>
 676:	00 00       	nop

	_delay_ms( 3000 );

	/* Clear ESP8266 Buffer */
	ESP8266_ClearBuffer();
 678:	0e 94 4e 02 	call	0x49c	; 0x49c <ESP8266_ClearBuffer>
    
	/* SET THE MODE OF ESP (STATION MODE) */
	UART_sendString( (u_int8 *)"AT+CWMODE=1\r\n" );
 67c:	88 ee       	ldi	r24, 0xE8	; 232
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
 684:	8f eb       	ldi	r24, 0xBF	; 191
 686:	97 e2       	ldi	r25, 0x27	; 39
 688:	a9 e0       	ldi	r26, 0x09	; 9
 68a:	81 50       	subi	r24, 0x01	; 1
 68c:	90 40       	sbci	r25, 0x00	; 0
 68e:	a0 40       	sbci	r26, 0x00	; 0
 690:	e1 f7       	brne	.-8      	; 0x68a <ESP8266_INIT+0x2c>
 692:	00 c0       	rjmp	.+0      	; 0x694 <ESP8266_INIT+0x36>
 694:	00 00       	nop
	_delay_ms( 3000 );
    
	/* Clear ESP8266 Buffer */
	ESP8266_ClearBuffer();
 696:	0e 94 4e 02 	call	0x49c	; 0x49c <ESP8266_ClearBuffer>
    
	
	UART_sendString( (u_int8 *)"AT+CIPMODE=0\r\n" );
 69a:	86 ef       	ldi	r24, 0xF6	; 246
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_sendString>
 6a2:	8f eb       	ldi	r24, 0xBF	; 191
 6a4:	97 e2       	ldi	r25, 0x27	; 39
 6a6:	a9 e0       	ldi	r26, 0x09	; 9
 6a8:	81 50       	subi	r24, 0x01	; 1
 6aa:	90 40       	sbci	r25, 0x00	; 0
 6ac:	a0 40       	sbci	r26, 0x00	; 0
 6ae:	e1 f7       	brne	.-8      	; 0x6a8 <ESP8266_INIT+0x4a>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <ESP8266_INIT+0x54>
 6b2:	00 00       	nop
	_delay_ms( 3000 );

}
 6b4:	08 95       	ret

000006b6 <GPS_INIT>:

#include <util/delay.h>
						
void GPS_INIT(void)
{
	UART_init();
 6b6:	0e 94 36 07 	call	0xe6c	; 0xe6c <UART_init>
}
 6ba:	08 95       	ret

000006bc <GPS_extract_position_val>:

void GPS_extract_position_val(u_int8 *long_value , u_int8 *lat_value)
{
 6bc:	8f 92       	push	r8
 6be:	9f 92       	push	r9
 6c0:	af 92       	push	r10
 6c2:	bf 92       	push	r11
 6c4:	cf 92       	push	r12
 6c6:	df 92       	push	r13
 6c8:	ef 92       	push	r14
 6ca:	ff 92       	push	r15
 6cc:	0f 93       	push	r16
 6ce:	1f 93       	push	r17
 6d0:	df 93       	push	r29
 6d2:	cf 93       	push	r28
 6d4:	cd b7       	in	r28, 0x3d	; 61
 6d6:	de b7       	in	r29, 0x3e	; 62
 6d8:	c8 54       	subi	r28, 0x48	; 72
 6da:	d0 40       	sbci	r29, 0x00	; 0
 6dc:	0f b6       	in	r0, 0x3f	; 63
 6de:	f8 94       	cli
 6e0:	de bf       	out	0x3e, r29	; 62
 6e2:	0f be       	out	0x3f, r0	; 63
 6e4:	cd bf       	out	0x3d, r28	; 61
 6e6:	5c 01       	movw	r10, r24
 6e8:	4b 01       	movw	r8, r22
	
	/* ARRAY TO STORE DATA RECEIVED FROM GPS */
	u_int8 gps_str[66];
	
	/* STARTING OF COORDINATES STRING */
	u_int8 gpgga[6] = {'$' , 'G' , 'P' , 'G' , 'G' , 'A'};
 6ea:	de 01       	movw	r26, r28
 6ec:	ad 5b       	subi	r26, 0xBD	; 189
 6ee:	bf 4f       	sbci	r27, 0xFF	; 255
 6f0:	e5 e0       	ldi	r30, 0x05	; 5
 6f2:	f1 e0       	ldi	r31, 0x01	; 1
 6f4:	86 e0       	ldi	r24, 0x06	; 6
 6f6:	01 90       	ld	r0, Z+
 6f8:	0d 92       	st	X+, r0
 6fa:	81 50       	subi	r24, 0x01	; 1
 6fc:	e1 f7       	brne	.-8      	; 0x6f6 <GPS_extract_position_val+0x3a>
	
	u_int8 gps_str_counter = 0 ;
 6fe:	ff 24       	eor	r15, r15
	{
		rx_data = UART_recieveByte();
		
		gps_str_counter++;
		
		gps_str[gps_str_counter -1] = rx_data;
 700:	8e 01       	movw	r16, r28
 702:	0f 5f       	subi	r16, 0xFF	; 255
 704:	1f 4f       	sbci	r17, 0xFF	; 255
		
		/* CHECK THE CORRECTNESS OF RECEIVED START */
		if(gps_str_counter < 7)
		{
			if (gps_str[gps_str_counter - 1] == gpgga[gps_str_counter - 1])
 706:	0f 2e       	mov	r0, r31
 708:	f3 e4       	ldi	r31, 0x43	; 67
 70a:	cf 2e       	mov	r12, r31
 70c:	dd 24       	eor	r13, r13
 70e:	f0 2d       	mov	r31, r0
 710:	cc 0e       	add	r12, r28
 712:	dd 1e       	adc	r13, r29
			{
	
			}
			else
			gps_str_counter = 0;
 714:	ee 24       	eor	r14, r14
 716:	01 c0       	rjmp	.+2      	; 0x71a <GPS_extract_position_val+0x5e>
 718:	fe 2c       	mov	r15, r14
	
	u_int8 gps_str_counter = 0 ;
	
    while(gps_str_counter < 70)
	{
		rx_data = UART_recieveByte();
 71a:	0e 94 4e 07 	call	0xe9c	; 0xe9c <UART_recieveByte>
		
		gps_str_counter++;
 71e:	f3 94       	inc	r15
		
		gps_str[gps_str_counter -1] = rx_data;
 720:	2f 2d       	mov	r18, r15
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	21 50       	subi	r18, 0x01	; 1
 726:	30 40       	sbci	r19, 0x00	; 0
 728:	f8 01       	movw	r30, r16
 72a:	e2 0f       	add	r30, r18
 72c:	f3 1f       	adc	r31, r19
 72e:	80 83       	st	Z, r24
		
		/* CHECK THE CORRECTNESS OF RECEIVED START */
		if(gps_str_counter < 7)
 730:	9f 2d       	mov	r25, r15
 732:	97 30       	cpi	r25, 0x07	; 7
 734:	30 f4       	brcc	.+12     	; 0x742 <GPS_extract_position_val+0x86>
		{
			if (gps_str[gps_str_counter - 1] == gpgga[gps_str_counter - 1])
 736:	2c 0d       	add	r18, r12
 738:	3d 1d       	adc	r19, r13
 73a:	f9 01       	movw	r30, r18
 73c:	90 81       	ld	r25, Z
 73e:	89 17       	cp	r24, r25
 740:	59 f7       	brne	.-42     	; 0x718 <GPS_extract_position_val+0x5c>
			}
			else
			gps_str_counter = 0;
		}
		
		if(gps_str_counter == 70)
 742:	ff 2d       	mov	r31, r15
 744:	f6 34       	cpi	r31, 0x46	; 70
 746:	d1 f4       	brne	.+52     	; 0x77c <GPS_extract_position_val+0xc0>
 748:	fe 01       	movw	r30, r28
 74a:	7f 96       	adiw	r30, 0x1f	; 31
 74c:	d5 01       	movw	r26, r10
void GPS_INIT(void)
{
	UART_init();
}

void GPS_extract_position_val(u_int8 *long_value , u_int8 *lat_value)
 74e:	ce 01       	movw	r24, r28
 750:	8c 96       	adiw	r24, 0x2c	; 44
			u_int8 j = 0 ; //COUNTER FOR THE LONGTUDE STRING
			
			 /* STORING THE LONGTUDE POSITION */
			for(j = 0 ; j <= 12 ; j++)
			{
				long_value[j] = gps_str[j+30];
 752:	21 91       	ld	r18, Z+
 754:	2d 93       	st	X+, r18
			gps_str_counter = 0; //COUNTER FOR THE RECEIVED STRING
			
			u_int8 j = 0 ; //COUNTER FOR THE LONGTUDE STRING
			
			 /* STORING THE LONGTUDE POSITION */
			for(j = 0 ; j <= 12 ; j++)
 756:	e8 17       	cp	r30, r24
 758:	f9 07       	cpc	r31, r25
 75a:	d9 f7       	brne	.-10     	; 0x752 <GPS_extract_position_val+0x96>
			{
				long_value[j] = gps_str[j+30];
			}
			long_value[13] = '\0'; // TERMINATE THE LONGTUDE STRING  
 75c:	f5 01       	movw	r30, r10
 75e:	15 86       	std	Z+13, r1	; 0x0d
 760:	fe 01       	movw	r30, r28
 762:	72 96       	adiw	r30, 0x12	; 18
 764:	d4 01       	movw	r26, r8
void GPS_INIT(void)
{
	UART_init();
}

void GPS_extract_position_val(u_int8 *long_value , u_int8 *lat_value)
 766:	ce 01       	movw	r24, r28
 768:	01 96       	adiw	r24, 0x01	; 1
 76a:	4d 96       	adiw	r24, 0x1d	; 29
			
			u_int8 k = 0 ; //COUNTER FOR THE LATITUDE STRING
			/* STORING THE LATITUDE POSITION */
			for(k = 0 ; k <= 11 ; k++)
			{
				lat_value[k] = gps_str[k+17];
 76c:	21 91       	ld	r18, Z+
 76e:	2d 93       	st	X+, r18
			}
			long_value[13] = '\0'; // TERMINATE THE LONGTUDE STRING  
			
			u_int8 k = 0 ; //COUNTER FOR THE LATITUDE STRING
			/* STORING THE LATITUDE POSITION */
			for(k = 0 ; k <= 11 ; k++)
 770:	e8 17       	cp	r30, r24
 772:	f9 07       	cpc	r31, r25
 774:	d9 f7       	brne	.-10     	; 0x76c <GPS_extract_position_val+0xb0>
			{
				lat_value[k] = gps_str[k+17];
			}
			lat_value[12] = '\0'; // TERMINATE THE LATITUDE STRING 
 776:	f4 01       	movw	r30, r8
 778:	14 86       	std	Z+12, r1	; 0x0c
			
			/* END THE FUNCTION LOOP */
			break;
 77a:	03 c0       	rjmp	.+6      	; 0x782 <GPS_extract_position_val+0xc6>
	/* STARTING OF COORDINATES STRING */
	u_int8 gpgga[6] = {'$' , 'G' , 'P' , 'G' , 'G' , 'A'};
	
	u_int8 gps_str_counter = 0 ;
	
    while(gps_str_counter < 70)
 77c:	ff 2d       	mov	r31, r15
 77e:	f6 34       	cpi	r31, 0x46	; 70
 780:	60 f2       	brcs	.-104    	; 0x71a <GPS_extract_position_val+0x5e>
			
			/* END THE FUNCTION LOOP */
			break;
		}
	}
}
 782:	c8 5b       	subi	r28, 0xB8	; 184
 784:	df 4f       	sbci	r29, 0xFF	; 255
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	f8 94       	cli
 78a:	de bf       	out	0x3e, r29	; 62
 78c:	0f be       	out	0x3f, r0	; 63
 78e:	cd bf       	out	0x3d, r28	; 61
 790:	cf 91       	pop	r28
 792:	df 91       	pop	r29
 794:	1f 91       	pop	r17
 796:	0f 91       	pop	r16
 798:	ff 90       	pop	r15
 79a:	ef 90       	pop	r14
 79c:	df 90       	pop	r13
 79e:	cf 90       	pop	r12
 7a0:	bf 90       	pop	r11
 7a2:	af 90       	pop	r10
 7a4:	9f 90       	pop	r9
 7a6:	8f 90       	pop	r8
 7a8:	08 95       	ret

000007aa <LCD_SENDCMD>:
	
	#endif 
}

void LCD_SENDCMD(u_int8 cmd)
{
 7aa:	1f 93       	push	r17
 7ac:	18 2f       	mov	r17, r24
    DIO_SETPINVAL(LCD_8BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  //LATCH
	_delay_ms(5);
	
	#elif LCD_MODE == 4
	
	DIO_SETPINVAL(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_LOW);  //COMMAND MODE
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	61 e0       	ldi	r22, 0x01	; 1
 7b2:	40 e0       	ldi	r20, 0x00	; 0
 7b4:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>
	DIO_SETPINVAL(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);  //WRITE TO LCD MODE
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	62 e0       	ldi	r22, 0x02	; 2
 7bc:	40 e0       	ldi	r20, 0x00	; 0
 7be:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>
	DIO_SETPINVAL(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  //PREPARE FOR LATCH
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	63 e0       	ldi	r22, 0x03	; 3
 7c6:	40 e0       	ldi	r20, 0x00	; 0
 7c8:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>
	
	PORTA = ((cmd & 0xF0) | (PORTA & 0x0F)); //SEND THE MSB(HIGH NIBBLE)
 7cc:	8b b3       	in	r24, 0x1b	; 27
 7ce:	91 2f       	mov	r25, r17
 7d0:	90 7f       	andi	r25, 0xF0	; 240
 7d2:	8f 70       	andi	r24, 0x0F	; 15
 7d4:	89 2b       	or	r24, r25
 7d6:	8b bb       	out	0x1b, r24	; 27
	
	DIO_SETPINVAL(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); //LATCH
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	63 e0       	ldi	r22, 0x03	; 3
 7dc:	41 e0       	ldi	r20, 0x01	; 1
 7de:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>
 7e2:	8f e9       	ldi	r24, 0x9F	; 159
 7e4:	9f e0       	ldi	r25, 0x0F	; 15
 7e6:	01 97       	sbiw	r24, 0x01	; 1
 7e8:	f1 f7       	brne	.-4      	; 0x7e6 <LCD_SENDCMD+0x3c>
 7ea:	00 c0       	rjmp	.+0      	; 0x7ec <LCD_SENDCMD+0x42>
 7ec:	00 00       	nop
	_delay_ms(1);
	DIO_SETPINVAL(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  //LATCH
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	63 e0       	ldi	r22, 0x03	; 3
 7f2:	40 e0       	ldi	r20, 0x00	; 0
 7f4:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>
	
	PORTA = ((cmd << 4) | (PORTA & 0x0F)); //SEND THE LSB(LOW NIBBLE)
 7f8:	8b b3       	in	r24, 0x1b	; 27
 7fa:	12 95       	swap	r17
 7fc:	10 7f       	andi	r17, 0xF0	; 240
 7fe:	8f 70       	andi	r24, 0x0F	; 15
 800:	18 2b       	or	r17, r24
 802:	1b bb       	out	0x1b, r17	; 27
	
	DIO_SETPINVAL(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); //LATCH
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	63 e0       	ldi	r22, 0x03	; 3
 808:	41 e0       	ldi	r20, 0x01	; 1
 80a:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>
 80e:	8f e9       	ldi	r24, 0x9F	; 159
 810:	9f e0       	ldi	r25, 0x0F	; 15
 812:	01 97       	sbiw	r24, 0x01	; 1
 814:	f1 f7       	brne	.-4      	; 0x812 <LCD_SENDCMD+0x68>
 816:	00 c0       	rjmp	.+0      	; 0x818 <LCD_SENDCMD+0x6e>
 818:	00 00       	nop
	_delay_ms(1);
	DIO_SETPINVAL(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  //LATCH
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	63 e0       	ldi	r22, 0x03	; 3
 81e:	40 e0       	ldi	r20, 0x00	; 0
 820:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>
 824:	8f e1       	ldi	r24, 0x1F	; 31
 826:	9e e4       	ldi	r25, 0x4E	; 78
 828:	01 97       	sbiw	r24, 0x01	; 1
 82a:	f1 f7       	brne	.-4      	; 0x828 <LCD_SENDCMD+0x7e>
 82c:	00 c0       	rjmp	.+0      	; 0x82e <LCD_SENDCMD+0x84>
 82e:	00 00       	nop
	
	_delay_ms(5); //5 ms BEFORE SENDING THE NEXT COMMAND
	
	#endif
}
 830:	1f 91       	pop	r17
 832:	08 95       	ret

00000834 <LCD_INIT>:
	LCD_SENDCMD(LCD_RETURN_HOME);
	LCD_SENDCMD(LCD_CLEAR);
	
	#elif LCD_MODE == 4
	
	DIO_SETPINDIR(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_OUTPUT);
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	61 e0       	ldi	r22, 0x01	; 1
 838:	41 e0       	ldi	r20, 0x01	; 1
 83a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SETPINDIR>
	DIO_SETPINDIR(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_OUTPUT);
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	62 e0       	ldi	r22, 0x02	; 2
 842:	41 e0       	ldi	r20, 0x01	; 1
 844:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SETPINDIR>
	DIO_SETPINDIR(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_OUTPUT);
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	63 e0       	ldi	r22, 0x03	; 3
 84c:	41 e0       	ldi	r20, 0x01	; 1
 84e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SETPINDIR>
	
	DIO_SETPINDIR(LCD_4BIT_DATA_PORT , LCD_D4_PIN , DIO_PIN_OUTPUT);
 852:	80 e0       	ldi	r24, 0x00	; 0
 854:	64 e0       	ldi	r22, 0x04	; 4
 856:	41 e0       	ldi	r20, 0x01	; 1
 858:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SETPINDIR>
	DIO_SETPINDIR(LCD_4BIT_DATA_PORT , LCD_D5_PIN , DIO_PIN_OUTPUT);
 85c:	80 e0       	ldi	r24, 0x00	; 0
 85e:	65 e0       	ldi	r22, 0x05	; 5
 860:	41 e0       	ldi	r20, 0x01	; 1
 862:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SETPINDIR>
	DIO_SETPINDIR(LCD_4BIT_DATA_PORT , LCD_D6_PIN , DIO_PIN_OUTPUT);
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	66 e0       	ldi	r22, 0x06	; 6
 86a:	41 e0       	ldi	r20, 0x01	; 1
 86c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SETPINDIR>
	DIO_SETPINDIR(LCD_4BIT_DATA_PORT , LCD_D7_PIN , DIO_PIN_OUTPUT);
 870:	80 e0       	ldi	r24, 0x00	; 0
 872:	67 e0       	ldi	r22, 0x07	; 7
 874:	41 e0       	ldi	r20, 0x01	; 1
 876:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SETPINDIR>
 87a:	8f ef       	ldi	r24, 0xFF	; 255
 87c:	91 ee       	ldi	r25, 0xE1	; 225
 87e:	a4 e0       	ldi	r26, 0x04	; 4
 880:	81 50       	subi	r24, 0x01	; 1
 882:	90 40       	sbci	r25, 0x00	; 0
 884:	a0 40       	sbci	r26, 0x00	; 0
 886:	e1 f7       	brne	.-8      	; 0x880 <__stack+0x21>
 888:	00 c0       	rjmp	.+0      	; 0x88a <__stack+0x2b>
 88a:	00 00       	nop
	
	 _delay_ms(100);
	 
	 LCD_SENDCMD(LCD_4BIT_MODE_CMD1);
 88c:	83 e3       	ldi	r24, 0x33	; 51
 88e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_SENDCMD>
	 LCD_SENDCMD(LCD_4BIT_MODE_CMD2);
 892:	82 e3       	ldi	r24, 0x32	; 50
 894:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_SENDCMD>
	 LCD_SENDCMD(LCD_4BIT_MODE_CMD3);
 898:	88 e2       	ldi	r24, 0x28	; 40
 89a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_SENDCMD>
	 LCD_SENDCMD(LCD_CURSOR_OFF);
 89e:	8c e0       	ldi	r24, 0x0C	; 12
 8a0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_SENDCMD>
	 LCD_SENDCMD(LCD_CURSOR_INC);
 8a4:	86 e0       	ldi	r24, 0x06	; 6
 8a6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_SENDCMD>
	 LCD_SENDCMD(LCD_RETURN_HOME);
 8aa:	82 e0       	ldi	r24, 0x02	; 2
 8ac:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_SENDCMD>
	 LCD_SENDCMD(LCD_CLEAR);
 8b0:	81 e0       	ldi	r24, 0x01	; 1
 8b2:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_SENDCMD>
	
	#endif 
}
 8b6:	08 95       	ret

000008b8 <LCD_WRITECHAR>:
	
	#endif
}

void LCD_WRITECHAR(u_int8 chr)
{
 8b8:	1f 93       	push	r17
 8ba:	18 2f       	mov	r17, r24
	
	_delay_ms(5); //5 ms BEFORE SENDING THE NEXT CHARACTER
	
	#elif LCD_MODE == 4
	
	DIO_SETPINVAL(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_HIGH);  //DATA MODE
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	61 e0       	ldi	r22, 0x01	; 1
 8c0:	41 e0       	ldi	r20, 0x01	; 1
 8c2:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>
	DIO_SETPINVAL(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);  //WRITE TO LCD MODE
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	62 e0       	ldi	r22, 0x02	; 2
 8ca:	40 e0       	ldi	r20, 0x00	; 0
 8cc:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>
	DIO_SETPINVAL(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  //DATA MODE
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	63 e0       	ldi	r22, 0x03	; 3
 8d4:	40 e0       	ldi	r20, 0x00	; 0
 8d6:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>
	
	PORTA = ((chr & 0xF0) | (PORTA & 0x0F)); //SEND THE MSB(HIGH NIBBLE)
 8da:	8b b3       	in	r24, 0x1b	; 27
 8dc:	91 2f       	mov	r25, r17
 8de:	90 7f       	andi	r25, 0xF0	; 240
 8e0:	8f 70       	andi	r24, 0x0F	; 15
 8e2:	89 2b       	or	r24, r25
 8e4:	8b bb       	out	0x1b, r24	; 27
	
	DIO_SETPINVAL(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); //LATCH
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	63 e0       	ldi	r22, 0x03	; 3
 8ea:	41 e0       	ldi	r20, 0x01	; 1
 8ec:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>
 8f0:	8f e9       	ldi	r24, 0x9F	; 159
 8f2:	9f e0       	ldi	r25, 0x0F	; 15
 8f4:	01 97       	sbiw	r24, 0x01	; 1
 8f6:	f1 f7       	brne	.-4      	; 0x8f4 <LCD_WRITECHAR+0x3c>
 8f8:	00 c0       	rjmp	.+0      	; 0x8fa <LCD_WRITECHAR+0x42>
 8fa:	00 00       	nop
	_delay_ms(1);
	DIO_SETPINVAL(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW); //LATCH
 8fc:	81 e0       	ldi	r24, 0x01	; 1
 8fe:	63 e0       	ldi	r22, 0x03	; 3
 900:	40 e0       	ldi	r20, 0x00	; 0
 902:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>
	
	PORTA = ((chr << 4) | (PORTA & 0x0F)); //SEND THE LSB(LOW NIBBLE)
 906:	8b b3       	in	r24, 0x1b	; 27
 908:	12 95       	swap	r17
 90a:	10 7f       	andi	r17, 0xF0	; 240
 90c:	8f 70       	andi	r24, 0x0F	; 15
 90e:	18 2b       	or	r17, r24
 910:	1b bb       	out	0x1b, r17	; 27
	
	DIO_SETPINVAL(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); //LATCH
 912:	81 e0       	ldi	r24, 0x01	; 1
 914:	63 e0       	ldi	r22, 0x03	; 3
 916:	41 e0       	ldi	r20, 0x01	; 1
 918:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>
 91c:	8f e9       	ldi	r24, 0x9F	; 159
 91e:	9f e0       	ldi	r25, 0x0F	; 15
 920:	01 97       	sbiw	r24, 0x01	; 1
 922:	f1 f7       	brne	.-4      	; 0x920 <LCD_WRITECHAR+0x68>
 924:	00 c0       	rjmp	.+0      	; 0x926 <LCD_WRITECHAR+0x6e>
 926:	00 00       	nop
	_delay_ms(1);
	DIO_SETPINVAL(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW); //LATCH
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	63 e0       	ldi	r22, 0x03	; 3
 92c:	40 e0       	ldi	r20, 0x00	; 0
 92e:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>
 932:	8f e1       	ldi	r24, 0x1F	; 31
 934:	9e e4       	ldi	r25, 0x4E	; 78
 936:	01 97       	sbiw	r24, 0x01	; 1
 938:	f1 f7       	brne	.-4      	; 0x936 <LCD_WRITECHAR+0x7e>
 93a:	00 c0       	rjmp	.+0      	; 0x93c <LCD_WRITECHAR+0x84>
 93c:	00 00       	nop
	
	_delay_ms(5); //5 ms BEFORE SENDING THE NEXT CHARACTER
	
	#endif
}
 93e:	1f 91       	pop	r17
 940:	08 95       	ret

00000942 <LCD_WRITESTRING>:

void LCD_WRITESTRING(u_int8* str)
{
 942:	1f 93       	push	r17
 944:	cf 93       	push	r28
 946:	df 93       	push	r29
 948:	ec 01       	movw	r28, r24
	u_int8 i = 0 ;
	
	while (str[i] != '\0')
 94a:	88 81       	ld	r24, Y
 94c:	88 23       	and	r24, r24
 94e:	51 f0       	breq	.+20     	; 0x964 <LCD_WRITESTRING+0x22>
	#endif
}

void LCD_WRITESTRING(u_int8* str)
{
	u_int8 i = 0 ;
 950:	10 e0       	ldi	r17, 0x00	; 0
	
	while (str[i] != '\0')
	{
		LCD_WRITECHAR(str[i]);
 952:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_WRITECHAR>
		i++;
 956:	1f 5f       	subi	r17, 0xFF	; 255

void LCD_WRITESTRING(u_int8* str)
{
	u_int8 i = 0 ;
	
	while (str[i] != '\0')
 958:	fe 01       	movw	r30, r28
 95a:	e1 0f       	add	r30, r17
 95c:	f1 1d       	adc	r31, r1
 95e:	80 81       	ld	r24, Z
 960:	88 23       	and	r24, r24
 962:	b9 f7       	brne	.-18     	; 0x952 <LCD_WRITESTRING+0x10>
	{
		LCD_WRITECHAR(str[i]);
		i++;
	}
}
 964:	df 91       	pop	r29
 966:	cf 91       	pop	r28
 968:	1f 91       	pop	r17
 96a:	08 95       	ret

0000096c <LCD_GOTO>:

void LCD_GOTO(u_int8 row , u_int8 column)
{
 96c:	df 93       	push	r29
 96e:	cf 93       	push	r28
 970:	00 d0       	rcall	.+0      	; 0x972 <LCD_GOTO+0x6>
 972:	00 d0       	rcall	.+0      	; 0x974 <LCD_GOTO+0x8>
 974:	cd b7       	in	r28, 0x3d	; 61
 976:	de b7       	in	r29, 0x3e	; 62
	u_int8 positions[4] = {0x80 , 0xC0 , 0x94 , 0xD4}; //POSITIONS OF 1st cell of each row 
 978:	90 e8       	ldi	r25, 0x80	; 128
 97a:	99 83       	std	Y+1, r25	; 0x01
 97c:	90 ec       	ldi	r25, 0xC0	; 192
 97e:	9a 83       	std	Y+2, r25	; 0x02
 980:	94 e9       	ldi	r25, 0x94	; 148
 982:	9b 83       	std	Y+3, r25	; 0x03
 984:	94 ed       	ldi	r25, 0xD4	; 212
 986:	9c 83       	std	Y+4, r25	; 0x04
		LCD_SENDCMD(positions[row] + column);
 988:	fe 01       	movw	r30, r28
 98a:	e8 0f       	add	r30, r24
 98c:	f1 1d       	adc	r31, r1
 98e:	81 81       	ldd	r24, Z+1	; 0x01
 990:	86 0f       	add	r24, r22
 992:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_SENDCMD>
}
 996:	0f 90       	pop	r0
 998:	0f 90       	pop	r0
 99a:	0f 90       	pop	r0
 99c:	0f 90       	pop	r0
 99e:	cf 91       	pop	r28
 9a0:	df 91       	pop	r29
 9a2:	08 95       	ret

000009a4 <LCD_CLear>:

void LCD_CLear(void)
{
	LCD_SENDCMD(LCD_CLEAR);
 9a4:	81 e0       	ldi	r24, 0x01	; 1
 9a6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_SENDCMD>
}
 9aa:	08 95       	ret

000009ac <LCD_WRITEINT>:

void LCD_WRITEINT(s_int32 num)
{
 9ac:	8f 92       	push	r8
 9ae:	9f 92       	push	r9
 9b0:	af 92       	push	r10
 9b2:	bf 92       	push	r11
 9b4:	cf 92       	push	r12
 9b6:	df 92       	push	r13
 9b8:	ff 92       	push	r15
 9ba:	0f 93       	push	r16
 9bc:	1f 93       	push	r17
 9be:	df 93       	push	r29
 9c0:	cf 93       	push	r28
 9c2:	cd b7       	in	r28, 0x3d	; 61
 9c4:	de b7       	in	r29, 0x3e	; 62
 9c6:	2a 97       	sbiw	r28, 0x0a	; 10
 9c8:	0f b6       	in	r0, 0x3f	; 63
 9ca:	f8 94       	cli
 9cc:	de bf       	out	0x3e, r29	; 62
 9ce:	0f be       	out	0x3f, r0	; 63
 9d0:	cd bf       	out	0x3d, r28	; 61
	u_int8 i = 0, k ;
	u_int8 number[10];
	
	/* In case of negative numbers */
	if(num < 0)
 9d2:	99 23       	and	r25, r25
 9d4:	0c f0       	brlt	.+2      	; 0x9d8 <LCD_WRITEINT+0x2c>
 9d6:	41 c0       	rjmp	.+130    	; 0xa5a <LCD_WRITEINT+0xae>
	{
		num *= -1;
 9d8:	90 95       	com	r25
 9da:	80 95       	com	r24
 9dc:	70 95       	com	r23
 9de:	61 95       	neg	r22
 9e0:	7f 4f       	sbci	r23, 0xFF	; 255
 9e2:	8f 4f       	sbci	r24, 0xFF	; 255
 9e4:	9f 4f       	sbci	r25, 0xFF	; 255
		while(num > 0)
 9e6:	16 16       	cp	r1, r22
 9e8:	17 06       	cpc	r1, r23
 9ea:	18 06       	cpc	r1, r24
 9ec:	19 06       	cpc	r1, r25
 9ee:	0c f0       	brlt	.+2      	; 0x9f2 <LCD_WRITEINT+0x46>
 9f0:	70 c0       	rjmp	.+224    	; 0xad2 <LCD_WRITEINT+0x126>
	LCD_SENDCMD(LCD_CLEAR);
}

void LCD_WRITEINT(s_int32 num)
{
	u_int8 i = 0, k ;
 9f2:	ff 24       	eor	r15, r15
	if(num < 0)
	{
		num *= -1;
		while(num > 0)
		{
			number[i] = (num % 10) + 48;  //Equivalent ASCII of number
 9f4:	4e 01       	movw	r8, r28
 9f6:	08 94       	sec
 9f8:	81 1c       	adc	r8, r1
 9fa:	91 1c       	adc	r9, r1
 9fc:	0f 2e       	mov	r0, r31
 9fe:	fa e0       	ldi	r31, 0x0A	; 10
 a00:	af 2e       	mov	r10, r31
 a02:	f0 e0       	ldi	r31, 0x00	; 0
 a04:	bf 2e       	mov	r11, r31
 a06:	f0 e0       	ldi	r31, 0x00	; 0
 a08:	cf 2e       	mov	r12, r31
 a0a:	f0 e0       	ldi	r31, 0x00	; 0
 a0c:	df 2e       	mov	r13, r31
 a0e:	f0 2d       	mov	r31, r0
 a10:	84 01       	movw	r16, r8
 a12:	0f 0d       	add	r16, r15
 a14:	11 1d       	adc	r17, r1
 a16:	a6 01       	movw	r20, r12
 a18:	95 01       	movw	r18, r10
 a1a:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__divmodsi4>
 a1e:	60 5d       	subi	r22, 0xD0	; 208
 a20:	f8 01       	movw	r30, r16
 a22:	60 83       	st	Z, r22
			num /= 10;
 a24:	62 2f       	mov	r22, r18
 a26:	73 2f       	mov	r23, r19
 a28:	84 2f       	mov	r24, r20
 a2a:	95 2f       	mov	r25, r21
			i++;
 a2c:	f3 94       	inc	r15
	
	/* In case of negative numbers */
	if(num < 0)
	{
		num *= -1;
		while(num > 0)
 a2e:	16 16       	cp	r1, r22
 a30:	17 06       	cpc	r1, r23
 a32:	18 06       	cpc	r1, r24
 a34:	19 06       	cpc	r1, r25
 a36:	64 f3       	brlt	.-40     	; 0xa10 <LCD_WRITEINT+0x64>
		{
			number[i] = (num % 10) + 48;  //Equivalent ASCII of number
			num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
 a38:	fe 01       	movw	r30, r28
 a3a:	ef 0d       	add	r30, r15
 a3c:	f1 1d       	adc	r31, r1
 a3e:	8d e2       	ldi	r24, 0x2D	; 45
 a40:	81 83       	std	Z+1, r24	; 0x01
		
		for(k = i+1 ; k > 0 ; k--)
 a42:	f3 94       	inc	r15
 a44:	09 f4       	brne	.+2      	; 0xa48 <LCD_WRITEINT+0x9c>
 a46:	4a c0       	rjmp	.+148    	; 0xadc <LCD_WRITEINT+0x130>
		{
			LCD_WRITECHAR(number[k - 1]); //Display each number
 a48:	fe 01       	movw	r30, r28
 a4a:	ef 0d       	add	r30, r15
 a4c:	f1 1d       	adc	r31, r1
 a4e:	80 81       	ld	r24, Z
 a50:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_WRITECHAR>
			num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
		
		for(k = i+1 ; k > 0 ; k--)
 a54:	fa 94       	dec	r15
 a56:	c1 f7       	brne	.-16     	; 0xa48 <LCD_WRITEINT+0x9c>
 a58:	41 c0       	rjmp	.+130    	; 0xadc <LCD_WRITEINT+0x130>
		{
			LCD_WRITECHAR(number[k - 1]); //Display each number
		}
	}
	/* Zero case */
	else if(num == 0)
 a5a:	61 15       	cp	r22, r1
 a5c:	71 05       	cpc	r23, r1
 a5e:	81 05       	cpc	r24, r1
 a60:	91 05       	cpc	r25, r1
 a62:	21 f4       	brne	.+8      	; 0xa6c <LCD_WRITEINT+0xc0>
	{
		LCD_WRITECHAR('0');
 a64:	80 e3       	ldi	r24, 0x30	; 48
 a66:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_WRITECHAR>
 a6a:	38 c0       	rjmp	.+112    	; 0xadc <LCD_WRITEINT+0x130>
	}
	
	/* In case of positive numbers */
	else if(num > 0)
 a6c:	16 16       	cp	r1, r22
 a6e:	17 06       	cpc	r1, r23
 a70:	18 06       	cpc	r1, r24
 a72:	19 06       	cpc	r1, r25
 a74:	9c f5       	brge	.+102    	; 0xadc <LCD_WRITEINT+0x130>
 a76:	ff 24       	eor	r15, r15
	{
		while(num > 0)
		{
			number[i] = (num % 10) + 48; //Equivalent ASCII of number
 a78:	4e 01       	movw	r8, r28
 a7a:	08 94       	sec
 a7c:	81 1c       	adc	r8, r1
 a7e:	91 1c       	adc	r9, r1
 a80:	0f 2e       	mov	r0, r31
 a82:	fa e0       	ldi	r31, 0x0A	; 10
 a84:	af 2e       	mov	r10, r31
 a86:	f0 e0       	ldi	r31, 0x00	; 0
 a88:	bf 2e       	mov	r11, r31
 a8a:	f0 e0       	ldi	r31, 0x00	; 0
 a8c:	cf 2e       	mov	r12, r31
 a8e:	f0 e0       	ldi	r31, 0x00	; 0
 a90:	df 2e       	mov	r13, r31
 a92:	f0 2d       	mov	r31, r0
 a94:	84 01       	movw	r16, r8
 a96:	0f 0d       	add	r16, r15
 a98:	11 1d       	adc	r17, r1
 a9a:	a6 01       	movw	r20, r12
 a9c:	95 01       	movw	r18, r10
 a9e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__divmodsi4>
 aa2:	60 5d       	subi	r22, 0xD0	; 208
 aa4:	f8 01       	movw	r30, r16
 aa6:	60 83       	st	Z, r22
			num /= 10;
 aa8:	62 2f       	mov	r22, r18
 aaa:	73 2f       	mov	r23, r19
 aac:	84 2f       	mov	r24, r20
 aae:	95 2f       	mov	r25, r21
			i++;
 ab0:	f3 94       	inc	r15
	}
	
	/* In case of positive numbers */
	else if(num > 0)
	{
		while(num > 0)
 ab2:	16 16       	cp	r1, r22
 ab4:	17 06       	cpc	r1, r23
 ab6:	18 06       	cpc	r1, r24
 ab8:	19 06       	cpc	r1, r25
 aba:	64 f3       	brlt	.-40     	; 0xa94 <LCD_WRITEINT+0xe8>
			number[i] = (num % 10) + 48; //Equivalent ASCII of number
			num /= 10;
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
 abc:	ff 20       	and	r15, r15
 abe:	71 f0       	breq	.+28     	; 0xadc <LCD_WRITEINT+0x130>
		{
			LCD_WRITECHAR(number[k-1]); //Display each number
 ac0:	fe 01       	movw	r30, r28
 ac2:	ef 0d       	add	r30, r15
 ac4:	f1 1d       	adc	r31, r1
 ac6:	80 81       	ld	r24, Z
 ac8:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_WRITECHAR>
			number[i] = (num % 10) + 48; //Equivalent ASCII of number
			num /= 10;
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
 acc:	fa 94       	dec	r15
 ace:	c1 f7       	brne	.-16     	; 0xac0 <LCD_WRITEINT+0x114>
 ad0:	05 c0       	rjmp	.+10     	; 0xadc <LCD_WRITEINT+0x130>
		{
			number[i] = (num % 10) + 48;  //Equivalent ASCII of number
			num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
 ad2:	8d e2       	ldi	r24, 0x2D	; 45
 ad4:	89 83       	std	Y+1, r24	; 0x01
		
		for(k = i+1 ; k > 0 ; k--)
 ad6:	ff 24       	eor	r15, r15
 ad8:	f3 94       	inc	r15
 ada:	b6 cf       	rjmp	.-148    	; 0xa48 <LCD_WRITEINT+0x9c>
		for(k = i ; k > 0 ; k--)
		{
			LCD_WRITECHAR(number[k-1]); //Display each number
		}
	}
}
 adc:	2a 96       	adiw	r28, 0x0a	; 10
 ade:	0f b6       	in	r0, 0x3f	; 63
 ae0:	f8 94       	cli
 ae2:	de bf       	out	0x3e, r29	; 62
 ae4:	0f be       	out	0x3f, r0	; 63
 ae6:	cd bf       	out	0x3d, r28	; 61
 ae8:	cf 91       	pop	r28
 aea:	df 91       	pop	r29
 aec:	1f 91       	pop	r17
 aee:	0f 91       	pop	r16
 af0:	ff 90       	pop	r15
 af2:	df 90       	pop	r13
 af4:	cf 90       	pop	r12
 af6:	bf 90       	pop	r11
 af8:	af 90       	pop	r10
 afa:	9f 90       	pop	r9
 afc:	8f 90       	pop	r8
 afe:	08 95       	ret

00000b00 <LED_INIT>:

#include "LED.h"

void LED_INIT(u_int8 port , u_int8 pin)
{
	switch (port)
 b00:	81 30       	cpi	r24, 0x01	; 1
 b02:	61 f0       	breq	.+24     	; 0xb1c <LED_INIT+0x1c>
 b04:	81 30       	cpi	r24, 0x01	; 1
 b06:	28 f0       	brcs	.+10     	; 0xb12 <LED_INIT+0x12>
 b08:	82 30       	cpi	r24, 0x02	; 2
 b0a:	69 f0       	breq	.+26     	; 0xb26 <LED_INIT+0x26>
 b0c:	83 30       	cpi	r24, 0x03	; 3
 b0e:	a1 f4       	brne	.+40     	; 0xb38 <LED_INIT+0x38>
 b10:	0f c0       	rjmp	.+30     	; 0xb30 <LED_INIT+0x30>
	{
		case DIO_PORTA:
		DIO_SETPINDIR(DIO_PORTA , pin , DIO_PIN_OUTPUT);
 b12:	80 e0       	ldi	r24, 0x00	; 0
 b14:	41 e0       	ldi	r20, 0x01	; 1
 b16:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SETPINDIR>
		break;
 b1a:	08 95       	ret
		
		case DIO_PORTB:
		DIO_SETPINDIR(DIO_PORTB , pin , DIO_PIN_OUTPUT);
 b1c:	81 e0       	ldi	r24, 0x01	; 1
 b1e:	41 e0       	ldi	r20, 0x01	; 1
 b20:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SETPINDIR>
		break;
 b24:	08 95       	ret
		
		case DIO_PORTC:
		DIO_SETPINDIR(DIO_PORTC , pin , DIO_PIN_OUTPUT);
 b26:	82 e0       	ldi	r24, 0x02	; 2
 b28:	41 e0       	ldi	r20, 0x01	; 1
 b2a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SETPINDIR>
		break;
 b2e:	08 95       	ret
		
		case DIO_PORTD:
		DIO_SETPINDIR(DIO_PORTD , pin , DIO_PIN_OUTPUT);
 b30:	83 e0       	ldi	r24, 0x03	; 3
 b32:	41 e0       	ldi	r20, 0x01	; 1
 b34:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SETPINDIR>
 b38:	08 95       	ret

00000b3a <LED_ON>:
}

/* LED_ON WITH POSITIVE LOGIC */
void LED_ON(u_int8 port , u_int8 pin)
{
	switch (port)
 b3a:	81 30       	cpi	r24, 0x01	; 1
 b3c:	61 f0       	breq	.+24     	; 0xb56 <LED_ON+0x1c>
 b3e:	81 30       	cpi	r24, 0x01	; 1
 b40:	28 f0       	brcs	.+10     	; 0xb4c <LED_ON+0x12>
 b42:	82 30       	cpi	r24, 0x02	; 2
 b44:	69 f0       	breq	.+26     	; 0xb60 <LED_ON+0x26>
 b46:	83 30       	cpi	r24, 0x03	; 3
 b48:	a1 f4       	brne	.+40     	; 0xb72 <LED_ON+0x38>
 b4a:	0f c0       	rjmp	.+30     	; 0xb6a <LED_ON+0x30>
	{
		case DIO_PORTA:
		DIO_SETPINVAL(DIO_PORTA , pin , DIO_PIN_HIGH);
 b4c:	80 e0       	ldi	r24, 0x00	; 0
 b4e:	41 e0       	ldi	r20, 0x01	; 1
 b50:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>
		break;
 b54:	08 95       	ret
		
		case DIO_PORTB:
		DIO_SETPINVAL(DIO_PORTB , pin , DIO_PIN_HIGH);
 b56:	81 e0       	ldi	r24, 0x01	; 1
 b58:	41 e0       	ldi	r20, 0x01	; 1
 b5a:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>
		break;
 b5e:	08 95       	ret
		
		case DIO_PORTC:
		DIO_SETPINVAL(DIO_PORTC , pin , DIO_PIN_HIGH);
 b60:	82 e0       	ldi	r24, 0x02	; 2
 b62:	41 e0       	ldi	r20, 0x01	; 1
 b64:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>
		break;
 b68:	08 95       	ret
		
		case DIO_PORTD:
		DIO_SETPINVAL(DIO_PORTD, pin , DIO_PIN_HIGH);
 b6a:	83 e0       	ldi	r24, 0x03	; 3
 b6c:	41 e0       	ldi	r20, 0x01	; 1
 b6e:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>
 b72:	08 95       	ret

00000b74 <LED_OFF>:
}

/* LED_OFF WITH POSITIVE LOGIC */
void LED_OFF(u_int8 port , u_int8 pin)
{
	switch (port)
 b74:	81 30       	cpi	r24, 0x01	; 1
 b76:	61 f0       	breq	.+24     	; 0xb90 <LED_OFF+0x1c>
 b78:	81 30       	cpi	r24, 0x01	; 1
 b7a:	28 f0       	brcs	.+10     	; 0xb86 <LED_OFF+0x12>
 b7c:	82 30       	cpi	r24, 0x02	; 2
 b7e:	69 f0       	breq	.+26     	; 0xb9a <LED_OFF+0x26>
 b80:	83 30       	cpi	r24, 0x03	; 3
 b82:	a1 f4       	brne	.+40     	; 0xbac <LED_OFF+0x38>
 b84:	0f c0       	rjmp	.+30     	; 0xba4 <LED_OFF+0x30>
	{
		case DIO_PORTA:
		DIO_SETPINVAL(DIO_PORTA , pin , DIO_PIN_LOW);
 b86:	80 e0       	ldi	r24, 0x00	; 0
 b88:	40 e0       	ldi	r20, 0x00	; 0
 b8a:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>
		break;
 b8e:	08 95       	ret
		
		case DIO_PORTB:
		DIO_SETPINVAL(DIO_PORTB , pin , DIO_PIN_LOW);
 b90:	81 e0       	ldi	r24, 0x01	; 1
 b92:	40 e0       	ldi	r20, 0x00	; 0
 b94:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>
		break;
 b98:	08 95       	ret
		
		case DIO_PORTC:
		DIO_SETPINVAL(DIO_PORTC , pin , DIO_PIN_LOW);
 b9a:	82 e0       	ldi	r24, 0x02	; 2
 b9c:	40 e0       	ldi	r20, 0x00	; 0
 b9e:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>
		break;
 ba2:	08 95       	ret
		
		case DIO_PORTD:
		DIO_SETPINVAL(DIO_PORTD, pin , DIO_PIN_LOW);
 ba4:	83 e0       	ldi	r24, 0x03	; 3
 ba6:	40 e0       	ldi	r20, 0x00	; 0
 ba8:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>
 bac:	08 95       	ret

00000bae <LED_TOGGLE>:
}

/* LED TOGGLE WITH POSITIVE LOGIC */
void LED_TOGGLE(u_int8 port , u_int8 pin)
{
	switch (port)
 bae:	81 30       	cpi	r24, 0x01	; 1
 bb0:	59 f0       	breq	.+22     	; 0xbc8 <LED_TOGGLE+0x1a>
 bb2:	81 30       	cpi	r24, 0x01	; 1
 bb4:	28 f0       	brcs	.+10     	; 0xbc0 <LED_TOGGLE+0x12>
 bb6:	82 30       	cpi	r24, 0x02	; 2
 bb8:	59 f0       	breq	.+22     	; 0xbd0 <LED_TOGGLE+0x22>
 bba:	83 30       	cpi	r24, 0x03	; 3
 bbc:	81 f4       	brne	.+32     	; 0xbde <LED_TOGGLE+0x30>
 bbe:	0c c0       	rjmp	.+24     	; 0xbd8 <LED_TOGGLE+0x2a>
	{
		case DIO_PORTA:
		DIO_PINTOGGLE(DIO_PORTA , pin );
 bc0:	80 e0       	ldi	r24, 0x00	; 0
 bc2:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_PINTOGGLE>
		break;
 bc6:	08 95       	ret
		
		case DIO_PORTB:
		DIO_PINTOGGLE(DIO_PORTB , pin );
 bc8:	81 e0       	ldi	r24, 0x01	; 1
 bca:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_PINTOGGLE>
		break;
 bce:	08 95       	ret
		
		case DIO_PORTC:
		DIO_PINTOGGLE(DIO_PORTC , pin );
 bd0:	82 e0       	ldi	r24, 0x02	; 2
 bd2:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_PINTOGGLE>
		break;
 bd6:	08 95       	ret
		
		case DIO_PORTD:
		DIO_PINTOGGLE(DIO_PORTD, pin );
 bd8:	83 e0       	ldi	r24, 0x03	; 3
 bda:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_PINTOGGLE>
 bde:	08 95       	ret

00000be0 <SPI_INIT_MASTER>:
	 *          MISO ->  INPUT_PIN                     *
	 *          SCK  ->  OUTPUT_PIN                    *
	 *                                                 *
	 **************************************************/     
    
	DIO_SETPINDIR(DIO_PORTB , DIO_PIN4 , DIO_PIN_OUTPUT);
 be0:	81 e0       	ldi	r24, 0x01	; 1
 be2:	64 e0       	ldi	r22, 0x04	; 4
 be4:	41 e0       	ldi	r20, 0x01	; 1
 be6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SETPINDIR>
	DIO_SETPINDIR(DIO_PORTB , DIO_PIN5 , DIO_PIN_OUTPUT);
 bea:	81 e0       	ldi	r24, 0x01	; 1
 bec:	65 e0       	ldi	r22, 0x05	; 5
 bee:	41 e0       	ldi	r20, 0x01	; 1
 bf0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SETPINDIR>
	DIO_SETPINDIR(DIO_PORTB , DIO_PIN6 , DIO_PIN_INPUT);
 bf4:	81 e0       	ldi	r24, 0x01	; 1
 bf6:	66 e0       	ldi	r22, 0x06	; 6
 bf8:	40 e0       	ldi	r20, 0x00	; 0
 bfa:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SETPINDIR>
	DIO_SETPINDIR(DIO_PORTB , DIO_PIN7 , DIO_PIN_OUTPUT);
 bfe:	81 e0       	ldi	r24, 0x01	; 1
 c00:	67 e0       	ldi	r22, 0x07	; 7
 c02:	41 e0       	ldi	r20, 0x01	; 1
 c04:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SETPINDIR>
	
	/* CURRENT CONFIGURATION */
	SPCR = 0x53;
 c08:	83 e5       	ldi	r24, 0x53	; 83
 c0a:	8d b9       	out	0x0d, r24	; 13
	set_bit(SPCR , 0);
	clear_bit(SPCR , 1);
	set_bit(SPSR  , 0);
	#endif
	*/
}
 c0c:	08 95       	ret

00000c0e <SPI_INIT_SLAVE>:
	 *          MISO ->  OUTPUT_PIN                   *
	 *          SCK  ->  INPUT_PIN                    *
	 *                                                *
	 **************************************************/ 
	
	DIO_SETPINDIR(DIO_PORTB , DIO_PIN4 , DIO_PIN_INPUT);
 c0e:	81 e0       	ldi	r24, 0x01	; 1
 c10:	64 e0       	ldi	r22, 0x04	; 4
 c12:	40 e0       	ldi	r20, 0x00	; 0
 c14:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SETPINDIR>
	DIO_SETPINDIR(DIO_PORTB , DIO_PIN5 , DIO_PIN_INPUT);
 c18:	81 e0       	ldi	r24, 0x01	; 1
 c1a:	65 e0       	ldi	r22, 0x05	; 5
 c1c:	40 e0       	ldi	r20, 0x00	; 0
 c1e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SETPINDIR>
	DIO_SETPINDIR(DIO_PORTB , DIO_PIN6 , DIO_PIN_OUTPUT);
 c22:	81 e0       	ldi	r24, 0x01	; 1
 c24:	66 e0       	ldi	r22, 0x06	; 6
 c26:	41 e0       	ldi	r20, 0x01	; 1
 c28:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SETPINDIR>
	DIO_SETPINDIR(DIO_PORTB , DIO_PIN7 , DIO_PIN_INPUT);
 c2c:	81 e0       	ldi	r24, 0x01	; 1
 c2e:	67 e0       	ldi	r22, 0x07	; 7
 c30:	40 e0       	ldi	r20, 0x00	; 0
 c32:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SETPINDIR>
	
	/* CHOOSE SLAVE MODE */
	clear_bit(SPCR , 4);
 c36:	6c 98       	cbi	0x0d, 4	; 13
	
	/* ENABLE SPI MODULE */
	set_bit(SPCR , 6);
 c38:	6e 9a       	sbi	0x0d, 6	; 13
	
	set_bit(SPCR , 3);
	
	#elif SPI_CLOCK_POLARITY == IDLE_LOW_POLARITY
	
	clear_bit(SPCR , 3);
 c3a:	6b 98       	cbi	0x0d, 3	; 13
	#endif
	
	#if SPI_CLOCK_PHASE == READ_WRITE_PHASE
	
	clear_bit(SPCR , 2);
 c3c:	6a 98       	cbi	0x0d, 2	; 13
	#elif SPI_CLOCK_PHASE == WRITE_READ_PHASE
	
	set_bit(SPCR , 2);
	#endif
	
}
 c3e:	08 95       	ret

00000c40 <SPI_MASTER_INIT_TRANSMIT>:

void SPI_MASTER_INIT_TRANSMIT()
{
	/* DRIVE THE SS PIN LOW */
	DIO_SETPINVAL(DIO_PORTB , DIO_PIN4 , DIO_PIN_LOW);
 c40:	81 e0       	ldi	r24, 0x01	; 1
 c42:	64 e0       	ldi	r22, 0x04	; 4
 c44:	40 e0       	ldi	r20, 0x00	; 0
 c46:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>

}
 c4a:	08 95       	ret

00000c4c <SPI_MASTER_END_TRANSMIT>:

void SPI_MASTER_END_TRANSMIT()
{
	/* MAKE THE SS PIN HIGH */
	DIO_SETPINVAL(DIO_PORTB , DIO_PIN4 , DIO_PIN_HIGH);
 c4c:	81 e0       	ldi	r24, 0x01	; 1
 c4e:	64 e0       	ldi	r22, 0x04	; 4
 c50:	41 e0       	ldi	r20, 0x01	; 1
 c52:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SETPINVAL>
}
 c56:	08 95       	ret

00000c58 <SPI_TRANSCEIV_BYTE>:
     * RECEIVED DATA FROM SLAVE
     */
	
	u_int8 REC_DATA = 0;
	
	SPDR = DATA ;  /* TRANSMITTED DATA */
 c58:	8f b9       	out	0x0f, r24	; 15
	
	while(get_bit(SPSR , 7) == 0); /* DO NOT MOVE UNTILL DATA RECEIVED */
 c5a:	8e b1       	in	r24, 0x0e	; 14
 c5c:	88 1f       	adc	r24, r24
 c5e:	88 27       	eor	r24, r24
 c60:	88 1f       	adc	r24, r24
 c62:	8e b9       	out	0x0e, r24	; 14
 c64:	8e b1       	in	r24, 0x0e	; 14
 c66:	88 23       	and	r24, r24
 c68:	c1 f3       	breq	.-16     	; 0xc5a <SPI_TRANSCEIV_BYTE+0x2>
	
	REC_DATA = SPDR ; /* RECEIVED DATA */
 c6a:	8f b1       	in	r24, 0x0f	; 15
	
	return REC_DATA;
}
 c6c:	08 95       	ret

00000c6e <SPI_SEND_BYTE>:

void SPI_SEND_BYTE(u_int8 data)
{
	SPDR = data ;
 c6e:	8f b9       	out	0x0f, r24	; 15
	
	while(get_bit(SPSR , 7) == 0);
 c70:	8e b1       	in	r24, 0x0e	; 14
 c72:	88 1f       	adc	r24, r24
 c74:	88 27       	eor	r24, r24
 c76:	88 1f       	adc	r24, r24
 c78:	8e b9       	out	0x0e, r24	; 14
 c7a:	8e b1       	in	r24, 0x0e	; 14
 c7c:	88 23       	and	r24, r24
 c7e:	c1 f3       	breq	.-16     	; 0xc70 <SPI_SEND_BYTE+0x2>
}
 c80:	08 95       	ret

00000c82 <SPI_RECEIVE_BYTE>:

u_int8 SPI_RECEIVE_BYTE()
{
	u_int8 REC_DATA;
	
	while(get_bit(SPSR , 7) == 0);
 c82:	8e b1       	in	r24, 0x0e	; 14
 c84:	88 1f       	adc	r24, r24
 c86:	88 27       	eor	r24, r24
 c88:	88 1f       	adc	r24, r24
 c8a:	8e b9       	out	0x0e, r24	; 14
 c8c:	8e b1       	in	r24, 0x0e	; 14
 c8e:	88 23       	and	r24, r24
 c90:	c1 f3       	breq	.-16     	; 0xc82 <SPI_RECEIVE_BYTE>
	
	REC_DATA = SPDR ; 
 c92:	8f b1       	in	r24, 0x0f	; 15
	
	return REC_DATA;
}
 c94:	08 95       	ret

00000c96 <SPI_SEND_STRING>:

void SPI_SEND_STRING(const u_int8* str)
{
 c96:	1f 93       	push	r17
 c98:	cf 93       	push	r28
 c9a:	df 93       	push	r29
 c9c:	ec 01       	movw	r28, r24
	u_int8 counter = 0;
	
	while (str[counter] != '\0')
 c9e:	88 81       	ld	r24, Y
 ca0:	88 23       	and	r24, r24
 ca2:	51 f0       	breq	.+20     	; 0xcb8 <SPI_SEND_STRING+0x22>
	return REC_DATA;
}

void SPI_SEND_STRING(const u_int8* str)
{
	u_int8 counter = 0;
 ca4:	10 e0       	ldi	r17, 0x00	; 0
	
	while (str[counter] != '\0')
	{
		SPI_SEND_BYTE(str[counter]);
 ca6:	0e 94 37 06 	call	0xc6e	; 0xc6e <SPI_SEND_BYTE>
		
		counter++; /* MOVE TO THE SECOND LETTER */
 caa:	1f 5f       	subi	r17, 0xFF	; 255

void SPI_SEND_STRING(const u_int8* str)
{
	u_int8 counter = 0;
	
	while (str[counter] != '\0')
 cac:	fe 01       	movw	r30, r28
 cae:	e1 0f       	add	r30, r17
 cb0:	f1 1d       	adc	r31, r1
 cb2:	80 81       	ld	r24, Z
 cb4:	88 23       	and	r24, r24
 cb6:	b9 f7       	brne	.-18     	; 0xca6 <SPI_SEND_STRING+0x10>
	{
		SPI_SEND_BYTE(str[counter]);
		
		counter++; /* MOVE TO THE SECOND LETTER */
	}
}
 cb8:	df 91       	pop	r29
 cba:	cf 91       	pop	r28
 cbc:	1f 91       	pop	r17
 cbe:	08 95       	ret

00000cc0 <SPI_RECEIVE_STRING>:

void SPI_RECEIVE_STRING(u_int8* str)
{
 cc0:	ef 92       	push	r14
 cc2:	ff 92       	push	r15
 cc4:	1f 93       	push	r17
 cc6:	cf 93       	push	r28
 cc8:	df 93       	push	r29
 cca:	7c 01       	movw	r14, r24
	u_int8 counter = 0 ;
	
	str[counter] = SPI_RECEIVE_BYTE();
 ccc:	0e 94 41 06 	call	0xc82	; 0xc82 <SPI_RECEIVE_BYTE>
 cd0:	f7 01       	movw	r30, r14
 cd2:	80 83       	st	Z, r24
	
	while (str[counter] != '#')
 cd4:	83 32       	cpi	r24, 0x23	; 35
 cd6:	59 f0       	breq	.+22     	; 0xcee <SPI_RECEIVE_STRING+0x2e>
	}
}

void SPI_RECEIVE_STRING(u_int8* str)
{
	u_int8 counter = 0 ;
 cd8:	10 e0       	ldi	r17, 0x00	; 0
	
	str[counter] = SPI_RECEIVE_BYTE();
	
	while (str[counter] != '#')
	{
		counter++;
 cda:	1f 5f       	subi	r17, 0xFF	; 255
		
		str[counter] = SPI_RECEIVE_BYTE();
 cdc:	e7 01       	movw	r28, r14
 cde:	c1 0f       	add	r28, r17
 ce0:	d1 1d       	adc	r29, r1
 ce2:	0e 94 41 06 	call	0xc82	; 0xc82 <SPI_RECEIVE_BYTE>
 ce6:	88 83       	st	Y, r24
{
	u_int8 counter = 0 ;
	
	str[counter] = SPI_RECEIVE_BYTE();
	
	while (str[counter] != '#')
 ce8:	83 32       	cpi	r24, 0x23	; 35
 cea:	b9 f7       	brne	.-18     	; 0xcda <SPI_RECEIVE_STRING+0x1a>
 cec:	01 c0       	rjmp	.+2      	; 0xcf0 <SPI_RECEIVE_STRING+0x30>
 cee:	e7 01       	movw	r28, r14
		counter++;
		
		str[counter] = SPI_RECEIVE_BYTE();
	}
	
	str[counter] = '\0' ; /* TERMINATOR OF STRING */
 cf0:	18 82       	st	Y, r1
}
 cf2:	df 91       	pop	r29
 cf4:	cf 91       	pop	r28
 cf6:	1f 91       	pop	r17
 cf8:	ff 90       	pop	r15
 cfa:	ef 90       	pop	r14
 cfc:	08 95       	ret

00000cfe <s_to_i>:
	
u_int8 latitude[13] ; 
		

u_int32 s_to_i(u_int8 *str , u_int8 digits)
{
 cfe:	4f 92       	push	r4
 d00:	5f 92       	push	r5
 d02:	6f 92       	push	r6
 d04:	7f 92       	push	r7
 d06:	8f 92       	push	r8
 d08:	9f 92       	push	r9
 d0a:	af 92       	push	r10
 d0c:	bf 92       	push	r11
 d0e:	df 92       	push	r13
 d10:	ef 92       	push	r14
 d12:	ff 92       	push	r15
 d14:	0f 93       	push	r16
 d16:	1f 93       	push	r17
 d18:	cf 93       	push	r28
 d1a:	df 93       	push	r29
 d1c:	ec 01       	movw	r28, r24
	u_int8 counter = 0;
	u_int32 number = 0 , result = 0;
	switch (digits)
 d1e:	63 30       	cpi	r22, 0x03	; 3
 d20:	29 f1       	breq	.+74     	; 0xd6c <s_to_i+0x6e>
 d22:	64 30       	cpi	r22, 0x04	; 4
 d24:	28 f4       	brcc	.+10     	; 0xd30 <s_to_i+0x32>
 d26:	61 30       	cpi	r22, 0x01	; 1
 d28:	59 f0       	breq	.+22     	; 0xd40 <s_to_i+0x42>
 d2a:	62 30       	cpi	r22, 0x02	; 2
 d2c:	29 f4       	brne	.+10     	; 0xd38 <s_to_i+0x3a>
 d2e:	13 c0       	rjmp	.+38     	; 0xd56 <s_to_i+0x58>
 d30:	64 30       	cpi	r22, 0x04	; 4
 d32:	39 f1       	breq	.+78     	; 0xd82 <s_to_i+0x84>
 d34:	65 30       	cpi	r22, 0x05	; 5
 d36:	81 f1       	breq	.+96     	; 0xd98 <s_to_i+0x9a>
		

u_int32 s_to_i(u_int8 *str , u_int8 digits)
{
	u_int8 counter = 0;
	u_int32 number = 0 , result = 0;
 d38:	ee 24       	eor	r14, r14
 d3a:	ff 24       	eor	r15, r15
 d3c:	87 01       	movw	r16, r14
 d3e:	04 c0       	rjmp	.+8      	; 0xd48 <s_to_i+0x4a>
	switch (digits)
	{
		case 1:
		number = 1;
 d40:	ee 24       	eor	r14, r14
 d42:	ff 24       	eor	r15, r15
 d44:	87 01       	movw	r16, r14
 d46:	e3 94       	inc	r14
		default:
		break;
		
	}
	
	while (str[counter] != '\0')
 d48:	68 81       	ld	r22, Y
 d4a:	66 23       	and	r22, r22
 d4c:	81 f5       	brne	.+96     	; 0xdae <s_to_i+0xb0>
 d4e:	88 24       	eor	r8, r8
 d50:	99 24       	eor	r9, r9
 d52:	54 01       	movw	r10, r8
 d54:	58 c0       	rjmp	.+176    	; 0xe06 <s_to_i+0x108>
		case 1:
		number = 1;
		break;
		
		case 2:
		number = 10;
 d56:	0f 2e       	mov	r0, r31
 d58:	fa e0       	ldi	r31, 0x0A	; 10
 d5a:	ef 2e       	mov	r14, r31
 d5c:	f0 e0       	ldi	r31, 0x00	; 0
 d5e:	ff 2e       	mov	r15, r31
 d60:	f0 e0       	ldi	r31, 0x00	; 0
 d62:	0f 2f       	mov	r16, r31
 d64:	f0 e0       	ldi	r31, 0x00	; 0
 d66:	1f 2f       	mov	r17, r31
 d68:	f0 2d       	mov	r31, r0
		break;
 d6a:	ee cf       	rjmp	.-36     	; 0xd48 <s_to_i+0x4a>
		
		case 3:
		number = 100;
 d6c:	0f 2e       	mov	r0, r31
 d6e:	f4 e6       	ldi	r31, 0x64	; 100
 d70:	ef 2e       	mov	r14, r31
 d72:	f0 e0       	ldi	r31, 0x00	; 0
 d74:	ff 2e       	mov	r15, r31
 d76:	f0 e0       	ldi	r31, 0x00	; 0
 d78:	0f 2f       	mov	r16, r31
 d7a:	f0 e0       	ldi	r31, 0x00	; 0
 d7c:	1f 2f       	mov	r17, r31
 d7e:	f0 2d       	mov	r31, r0
		break;
 d80:	e3 cf       	rjmp	.-58     	; 0xd48 <s_to_i+0x4a>
		
		case 4:
		number = 1000;
 d82:	0f 2e       	mov	r0, r31
 d84:	f8 ee       	ldi	r31, 0xE8	; 232
 d86:	ef 2e       	mov	r14, r31
 d88:	f3 e0       	ldi	r31, 0x03	; 3
 d8a:	ff 2e       	mov	r15, r31
 d8c:	f0 e0       	ldi	r31, 0x00	; 0
 d8e:	0f 2f       	mov	r16, r31
 d90:	f0 e0       	ldi	r31, 0x00	; 0
 d92:	1f 2f       	mov	r17, r31
 d94:	f0 2d       	mov	r31, r0
		break;
 d96:	d8 cf       	rjmp	.-80     	; 0xd48 <s_to_i+0x4a>
		
		case 5:
		number = 10000;
 d98:	0f 2e       	mov	r0, r31
 d9a:	f0 e1       	ldi	r31, 0x10	; 16
 d9c:	ef 2e       	mov	r14, r31
 d9e:	f7 e2       	ldi	r31, 0x27	; 39
 da0:	ff 2e       	mov	r15, r31
 da2:	f0 e0       	ldi	r31, 0x00	; 0
 da4:	0f 2f       	mov	r16, r31
 da6:	f0 e0       	ldi	r31, 0x00	; 0
 da8:	1f 2f       	mov	r17, r31
 daa:	f0 2d       	mov	r31, r0
		break;
 dac:	cd cf       	rjmp	.-102    	; 0xd48 <s_to_i+0x4a>
		default:
		break;
		
	}
	
	while (str[counter] != '\0')
 dae:	88 24       	eor	r8, r8
 db0:	99 24       	eor	r9, r9
 db2:	54 01       	movw	r10, r8
 db4:	dd 24       	eor	r13, r13
	{
		// evaluating a number from character 
		result += ((str[counter] - 48) * number);
		number = (number / 10);
 db6:	0f 2e       	mov	r0, r31
 db8:	fa e0       	ldi	r31, 0x0A	; 10
 dba:	4f 2e       	mov	r4, r31
 dbc:	f0 e0       	ldi	r31, 0x00	; 0
 dbe:	5f 2e       	mov	r5, r31
 dc0:	f0 e0       	ldi	r31, 0x00	; 0
 dc2:	6f 2e       	mov	r6, r31
 dc4:	f0 e0       	ldi	r31, 0x00	; 0
 dc6:	7f 2e       	mov	r7, r31
 dc8:	f0 2d       	mov	r31, r0
	}
	
	while (str[counter] != '\0')
	{
		// evaluating a number from character 
		result += ((str[counter] - 48) * number);
 dca:	70 e0       	ldi	r23, 0x00	; 0
 dcc:	60 53       	subi	r22, 0x30	; 48
 dce:	70 40       	sbci	r23, 0x00	; 0
 dd0:	88 27       	eor	r24, r24
 dd2:	77 fd       	sbrc	r23, 7
 dd4:	80 95       	com	r24
 dd6:	98 2f       	mov	r25, r24
 dd8:	a8 01       	movw	r20, r16
 dda:	97 01       	movw	r18, r14
 ddc:	0e 94 86 07 	call	0xf0c	; 0xf0c <__mulsi3>
 de0:	86 0e       	add	r8, r22
 de2:	97 1e       	adc	r9, r23
 de4:	a8 1e       	adc	r10, r24
 de6:	b9 1e       	adc	r11, r25
		number = (number / 10);
 de8:	c8 01       	movw	r24, r16
 dea:	b7 01       	movw	r22, r14
 dec:	a3 01       	movw	r20, r6
 dee:	92 01       	movw	r18, r4
 df0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__udivmodsi4>
 df4:	79 01       	movw	r14, r18
 df6:	8a 01       	movw	r16, r20
		counter++;
 df8:	d3 94       	inc	r13
		default:
		break;
		
	}
	
	while (str[counter] != '\0')
 dfa:	fe 01       	movw	r30, r28
 dfc:	ed 0d       	add	r30, r13
 dfe:	f1 1d       	adc	r31, r1
 e00:	60 81       	ld	r22, Z
 e02:	66 23       	and	r22, r22
 e04:	11 f7       	brne	.-60     	; 0xdca <s_to_i+0xcc>
		number = (number / 10);
		counter++;
	}
	
	return result ;
}
 e06:	68 2d       	mov	r22, r8
 e08:	79 2d       	mov	r23, r9
 e0a:	8a 2d       	mov	r24, r10
 e0c:	9b 2d       	mov	r25, r11
 e0e:	df 91       	pop	r29
 e10:	cf 91       	pop	r28
 e12:	1f 91       	pop	r17
 e14:	0f 91       	pop	r16
 e16:	ff 90       	pop	r15
 e18:	ef 90       	pop	r14
 e1a:	df 90       	pop	r13
 e1c:	bf 90       	pop	r11
 e1e:	af 90       	pop	r10
 e20:	9f 90       	pop	r9
 e22:	8f 90       	pop	r8
 e24:	7f 90       	pop	r7
 e26:	6f 90       	pop	r6
 e28:	5f 90       	pop	r5
 e2a:	4f 90       	pop	r4
 e2c:	08 95       	ret

00000e2e <main>:


int main(void)
{
 e2e:	0f 93       	push	r16
 e30:	1f 93       	push	r17
 e32:	cf 93       	push	r28
 e34:	df 93       	push	r29
	u_int32 X = 0 ; 
	
	GPS_INIT();
 e36:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <GPS_INIT>

	LCD_INIT();
 e3a:	0e 94 1a 04 	call	0x834	; 0x834 <LCD_INIT>
	//SPI_INIT_MASTER();
	
	//SPI_MASTER_INIT_TRANSMIT();
	
	while (1) 
    {GPS_extract_position_val(longtude , latitude);
 e3e:	c5 ed       	ldi	r28, 0xD5	; 213
 e40:	d1 e0       	ldi	r29, 0x01	; 1
 e42:	03 ee       	ldi	r16, 0xE3	; 227
 e44:	11 e0       	ldi	r17, 0x01	; 1
 e46:	ce 01       	movw	r24, r28
 e48:	b8 01       	movw	r22, r16
 e4a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <GPS_extract_position_val>
	
	LCD_GOTO(0,0);
 e4e:	80 e0       	ldi	r24, 0x00	; 0
 e50:	60 e0       	ldi	r22, 0x00	; 0
 e52:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_GOTO>
	//LCD_WRITESTRING("long:");
	LCD_WRITESTRING(longtude);
 e56:	ce 01       	movw	r24, r28
 e58:	0e 94 a1 04 	call	0x942	; 0x942 <LCD_WRITESTRING>
	UART_sendString("long : ");
	UART_sendString(longtude);
	UART_sendString("\t");
	*/
	
	LCD_GOTO(1,0);
 e5c:	81 e0       	ldi	r24, 0x01	; 1
 e5e:	60 e0       	ldi	r22, 0x00	; 0
 e60:	0e 94 b6 04 	call	0x96c	; 0x96c <LCD_GOTO>
	//LCD_WRITESTRING("lat :");
	LCD_WRITESTRING(latitude);
 e64:	c8 01       	movw	r24, r16
 e66:	0e 94 a1 04 	call	0x942	; 0x942 <LCD_WRITESTRING>
 e6a:	ed cf       	rjmp	.-38     	; 0xe46 <main+0x18>

00000e6c <UART_init>:
#include "uart.h"
 
void UART_init(void)
{
	/* directions of TX and RX pins */
	DIO_SETPINDIR(DIO_PORTD , DIO_PIN1 , DIO_PIN_OUTPUT);
 e6c:	83 e0       	ldi	r24, 0x03	; 3
 e6e:	61 e0       	ldi	r22, 0x01	; 1
 e70:	41 e0       	ldi	r20, 0x01	; 1
 e72:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SETPINDIR>
	DIO_SETPINDIR(DIO_PORTD , DIO_PIN0 , DIO_PIN_INPUT);
 e76:	83 e0       	ldi	r24, 0x03	; 3
 e78:	60 e0       	ldi	r22, 0x00	; 0
 e7a:	40 e0       	ldi	r20, 0x00	; 0
 e7c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SETPINDIR>
	
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
 e80:	82 e0       	ldi	r24, 0x02	; 2
 e82:	8b b9       	out	0x0b, r24	; 11
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
 e84:	88 e1       	ldi	r24, 0x18	; 24
 e86:	8a b9       	out	0x0a, r24	; 10
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
 e88:	86 e8       	ldi	r24, 0x86	; 134
 e8a:	80 bd       	out	0x20, r24	; 32
	
	/* baud rate=9600 & Fosc=1MHz -->  UBBR=( Fosc / (8 * baud rate) ) - 1 = 12 */  
	UBRRH = 0;
 e8c:	10 bc       	out	0x20, r1	; 32
	UBRRL = 207;
 e8e:	8f ec       	ldi	r24, 0xCF	; 207
 e90:	89 b9       	out	0x09, r24	; 9
}
 e92:	08 95       	ret

00000e94 <UART_sendByte>:
	
void UART_sendByte(const u_int8 data)
{
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(bit_is_clear(UCSRA,UDRE)){}
 e94:	5d 9b       	sbis	0x0b, 5	; 11
 e96:	fe cf       	rjmp	.-4      	; 0xe94 <UART_sendByte>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
 e98:	8c b9       	out	0x0c, r24	; 12
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
 e9a:	08 95       	ret

00000e9c <UART_recieveByte>:

u_int8 UART_recieveByte(void)
{
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(bit_is_clear(UCSRA,RXC)){}
 e9c:	5f 9b       	sbis	0x0b, 7	; 11
 e9e:	fe cf       	rjmp	.-4      	; 0xe9c <UART_recieveByte>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
 ea0:	8c b1       	in	r24, 0x0c	; 12
}
 ea2:	08 95       	ret

00000ea4 <UART_sendString>:

void UART_sendString(const u_int8 *Str)
{
 ea4:	1f 93       	push	r17
 ea6:	cf 93       	push	r28
 ea8:	df 93       	push	r29
 eaa:	ec 01       	movw	r28, r24
	u_int8 i = 0;
	while(Str[i] != '\0')
 eac:	88 81       	ld	r24, Y
 eae:	88 23       	and	r24, r24
 eb0:	51 f0       	breq	.+20     	; 0xec6 <UART_sendString+0x22>
    return UDR;		
}

void UART_sendString(const u_int8 *Str)
{
	u_int8 i = 0;
 eb2:	10 e0       	ldi	r17, 0x00	; 0
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
 eb4:	0e 94 4a 07 	call	0xe94	; 0xe94 <UART_sendByte>
		i++;
 eb8:	1f 5f       	subi	r17, 0xFF	; 255
}

void UART_sendString(const u_int8 *Str)
{
	u_int8 i = 0;
	while(Str[i] != '\0')
 eba:	fe 01       	movw	r30, r28
 ebc:	e1 0f       	add	r30, r17
 ebe:	f1 1d       	adc	r31, r1
 ec0:	80 81       	ld	r24, Z
 ec2:	88 23       	and	r24, r24
 ec4:	b9 f7       	brne	.-18     	; 0xeb4 <UART_sendString+0x10>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
 ec6:	df 91       	pop	r29
 ec8:	cf 91       	pop	r28
 eca:	1f 91       	pop	r17
 ecc:	08 95       	ret

00000ece <UART_receiveString>:

void UART_receiveString(u_int8 *Str)
{
 ece:	ef 92       	push	r14
 ed0:	ff 92       	push	r15
 ed2:	1f 93       	push	r17
 ed4:	cf 93       	push	r28
 ed6:	df 93       	push	r29
 ed8:	7c 01       	movw	r14, r24
	u_int8 i = 0;
	Str[i] = UART_recieveByte();
 eda:	0e 94 4e 07 	call	0xe9c	; 0xe9c <UART_recieveByte>
 ede:	f7 01       	movw	r30, r14
 ee0:	80 83       	st	Z, r24
	while(Str[i] != '#')
 ee2:	83 32       	cpi	r24, 0x23	; 35
 ee4:	59 f0       	breq	.+22     	; 0xefc <UART_receiveString+0x2e>
	*******************************************************************/
}

void UART_receiveString(u_int8 *Str)
{
	u_int8 i = 0;
 ee6:	10 e0       	ldi	r17, 0x00	; 0
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
	{
		i++;
 ee8:	1f 5f       	subi	r17, 0xFF	; 255
		Str[i] = UART_recieveByte();
 eea:	e7 01       	movw	r28, r14
 eec:	c1 0f       	add	r28, r17
 eee:	d1 1d       	adc	r29, r1
 ef0:	0e 94 4e 07 	call	0xe9c	; 0xe9c <UART_recieveByte>
 ef4:	88 83       	st	Y, r24

void UART_receiveString(u_int8 *Str)
{
	u_int8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
 ef6:	83 32       	cpi	r24, 0x23	; 35
 ef8:	b9 f7       	brne	.-18     	; 0xee8 <UART_receiveString+0x1a>
 efa:	01 c0       	rjmp	.+2      	; 0xefe <UART_receiveString+0x30>
 efc:	e7 01       	movw	r28, r14
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
 efe:	18 82       	st	Y, r1
}
 f00:	df 91       	pop	r29
 f02:	cf 91       	pop	r28
 f04:	1f 91       	pop	r17
 f06:	ff 90       	pop	r15
 f08:	ef 90       	pop	r14
 f0a:	08 95       	ret

00000f0c <__mulsi3>:
 f0c:	62 9f       	mul	r22, r18
 f0e:	d0 01       	movw	r26, r0
 f10:	73 9f       	mul	r23, r19
 f12:	f0 01       	movw	r30, r0
 f14:	82 9f       	mul	r24, r18
 f16:	e0 0d       	add	r30, r0
 f18:	f1 1d       	adc	r31, r1
 f1a:	64 9f       	mul	r22, r20
 f1c:	e0 0d       	add	r30, r0
 f1e:	f1 1d       	adc	r31, r1
 f20:	92 9f       	mul	r25, r18
 f22:	f0 0d       	add	r31, r0
 f24:	83 9f       	mul	r24, r19
 f26:	f0 0d       	add	r31, r0
 f28:	74 9f       	mul	r23, r20
 f2a:	f0 0d       	add	r31, r0
 f2c:	65 9f       	mul	r22, r21
 f2e:	f0 0d       	add	r31, r0
 f30:	99 27       	eor	r25, r25
 f32:	72 9f       	mul	r23, r18
 f34:	b0 0d       	add	r27, r0
 f36:	e1 1d       	adc	r30, r1
 f38:	f9 1f       	adc	r31, r25
 f3a:	63 9f       	mul	r22, r19
 f3c:	b0 0d       	add	r27, r0
 f3e:	e1 1d       	adc	r30, r1
 f40:	f9 1f       	adc	r31, r25
 f42:	bd 01       	movw	r22, r26
 f44:	cf 01       	movw	r24, r30
 f46:	11 24       	eor	r1, r1
 f48:	08 95       	ret

00000f4a <__udivmodsi4>:
 f4a:	a1 e2       	ldi	r26, 0x21	; 33
 f4c:	1a 2e       	mov	r1, r26
 f4e:	aa 1b       	sub	r26, r26
 f50:	bb 1b       	sub	r27, r27
 f52:	fd 01       	movw	r30, r26
 f54:	0d c0       	rjmp	.+26     	; 0xf70 <__udivmodsi4_ep>

00000f56 <__udivmodsi4_loop>:
 f56:	aa 1f       	adc	r26, r26
 f58:	bb 1f       	adc	r27, r27
 f5a:	ee 1f       	adc	r30, r30
 f5c:	ff 1f       	adc	r31, r31
 f5e:	a2 17       	cp	r26, r18
 f60:	b3 07       	cpc	r27, r19
 f62:	e4 07       	cpc	r30, r20
 f64:	f5 07       	cpc	r31, r21
 f66:	20 f0       	brcs	.+8      	; 0xf70 <__udivmodsi4_ep>
 f68:	a2 1b       	sub	r26, r18
 f6a:	b3 0b       	sbc	r27, r19
 f6c:	e4 0b       	sbc	r30, r20
 f6e:	f5 0b       	sbc	r31, r21

00000f70 <__udivmodsi4_ep>:
 f70:	66 1f       	adc	r22, r22
 f72:	77 1f       	adc	r23, r23
 f74:	88 1f       	adc	r24, r24
 f76:	99 1f       	adc	r25, r25
 f78:	1a 94       	dec	r1
 f7a:	69 f7       	brne	.-38     	; 0xf56 <__udivmodsi4_loop>
 f7c:	60 95       	com	r22
 f7e:	70 95       	com	r23
 f80:	80 95       	com	r24
 f82:	90 95       	com	r25
 f84:	9b 01       	movw	r18, r22
 f86:	ac 01       	movw	r20, r24
 f88:	bd 01       	movw	r22, r26
 f8a:	cf 01       	movw	r24, r30
 f8c:	08 95       	ret

00000f8e <__divmodsi4>:
 f8e:	97 fb       	bst	r25, 7
 f90:	09 2e       	mov	r0, r25
 f92:	05 26       	eor	r0, r21
 f94:	0e d0       	rcall	.+28     	; 0xfb2 <__divmodsi4_neg1>
 f96:	57 fd       	sbrc	r21, 7
 f98:	04 d0       	rcall	.+8      	; 0xfa2 <__divmodsi4_neg2>
 f9a:	d7 df       	rcall	.-82     	; 0xf4a <__udivmodsi4>
 f9c:	0a d0       	rcall	.+20     	; 0xfb2 <__divmodsi4_neg1>
 f9e:	00 1c       	adc	r0, r0
 fa0:	38 f4       	brcc	.+14     	; 0xfb0 <__divmodsi4_exit>

00000fa2 <__divmodsi4_neg2>:
 fa2:	50 95       	com	r21
 fa4:	40 95       	com	r20
 fa6:	30 95       	com	r19
 fa8:	21 95       	neg	r18
 faa:	3f 4f       	sbci	r19, 0xFF	; 255
 fac:	4f 4f       	sbci	r20, 0xFF	; 255
 fae:	5f 4f       	sbci	r21, 0xFF	; 255

00000fb0 <__divmodsi4_exit>:
 fb0:	08 95       	ret

00000fb2 <__divmodsi4_neg1>:
 fb2:	f6 f7       	brtc	.-4      	; 0xfb0 <__divmodsi4_exit>
 fb4:	90 95       	com	r25
 fb6:	80 95       	com	r24
 fb8:	70 95       	com	r23
 fba:	61 95       	neg	r22
 fbc:	7f 4f       	sbci	r23, 0xFF	; 255
 fbe:	8f 4f       	sbci	r24, 0xFF	; 255
 fc0:	9f 4f       	sbci	r25, 0xFF	; 255
 fc2:	08 95       	ret

00000fc4 <_exit>:
 fc4:	f8 94       	cli

00000fc6 <__stop_program>:
 fc6:	ff cf       	rjmp	.-2      	; 0xfc6 <__stop_program>
